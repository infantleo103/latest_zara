{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a high-fidelity Zara website clone featuring minimalist luxury design with aesthetic model photography and sophisticated animations. The application recreates Zara's premium fashion e-commerce experience with floating navigation, full-size indoor photoshoot images in random grid layouts, and contemporary design elements. Built as a full-stack solution with complete shopping functionality including product browsing, cart management, and search capabilities.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for fast development and building\n- **Styling**: Tailwind CSS with shadcn/ui component library for consistent design\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: Zustand for cart state with persistence support\n- **Data Fetching**: TanStack Query (React Query) for server state management and caching\n- **Form Handling**: React Hook Form with Zod validation\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Pattern**: RESTful API design with structured route handlers\n- **Development**: Hot reload with Vite in development mode\n- **Build System**: esbuild for production bundling\n\n## Data Storage Solutions\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Provider**: Neon Database for serverless PostgreSQL hosting\n- **Schema Management**: Drizzle Kit for migrations and schema management\n- **Development Fallback**: In-memory storage implementation for development/testing\n\n## Authentication and Authorization\n- **Session Management**: Express sessions with PostgreSQL session store\n- **Anonymous Shopping**: Cart functionality works without user authentication\n- **Security**: CORS configuration and input validation with Zod schemas\n\n## External Dependencies\n\n### Database & ORM\n- **Neon Database**: Serverless PostgreSQL hosting (@neondatabase/serverless)\n- **Drizzle ORM**: Type-safe database operations with PostgreSQL dialect\n- **Session Store**: connect-pg-simple for PostgreSQL-backed session storage\n\n### UI & Styling\n- **shadcn/ui**: Comprehensive UI component library built on Radix UI primitives\n- **Tailwind CSS**: Utility-first CSS framework with custom design tokens\n- **Radix UI**: Headless UI components for accessibility and customization\n- **Lucide React**: Icon library for consistent iconography\n\n### Development Tools\n- **Vite**: Fast build tool with HMR and React plugin support\n- **TypeScript**: Static type checking across frontend and backend\n- **Replit Integration**: Custom plugins for development environment integration\n\n### Utilities & Libraries\n- **TanStack Query**: Server state management with caching and background updates\n- **Zustand**: Lightweight state management with persistence\n- **date-fns**: Date manipulation and formatting utilities\n- **clsx & tailwind-merge**: Conditional CSS class management\n\n## Recent Changes (August 2025)\n\n### Aesthetic Design Overhaul\n- **Floating Navigation**: Transparent header that becomes solid on scroll with enlarged ZARA logo\n- **Hero Section**: Full-screen carousel with rotating background images and sophisticated typography\n- **Model Grid**: Indoor photoshoot images in masonry layout with random grid alignment (Zara-inspired)\n- **Glass Morphism**: Floating elements with backdrop blur effects throughout the interface\n- **Enhanced Typography**: Extralight fonts with precise letter spacing for luxury aesthetic\n- **Parallax Effects**: Fixed background attachments for depth and visual interest\n- **Animation System**: Fade-in animations, floating elements, and smooth transitions\n\n### Component Architecture\n- **AestheticGallery**: Full-screen image sections with category overlays\n- **ModelGrid**: Random masonry grid layout for indoor model photography\n- **Enhanced Header**: Scroll-responsive navigation with scaling logo and color transitions\n- **Improved CSS**: Custom animations, glass morphism utilities, and responsive design patterns\n\n### Product Detail Page Features\n- **Split-Screen Layout**: Professional image gallery left, product details right\n- **Aesthetic Typography**: Minimalist fonts with precise letter spacing\n- **Product Recommendations**: \"YOU MAY BE INTERESTED IN\" section below main product\n- **Virtual Try-On**: Google Doppel integration for users to try outfits with their photos\n- **Shopping Cart**: Complete cart functionality with error handling and persistence\n- **Stripe Integration**: Secure checkout system with payment processing","size_bytes":4656},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { z } from \"zod\";\nimport { insertCartItemSchema } from \"@shared/schema\";\nimport { processVirtualTryOn } from \"./virtual-tryon\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Categories\n  app.get(\"/api/categories\", async (req, res) => {\n    try {\n      const categories = await storage.getCategories();\n      res.json(categories);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch categories\" });\n    }\n  });\n\n  app.get(\"/api/categories/:slug\", async (req, res) => {\n    try {\n      const category = await storage.getCategoryBySlug(req.params.slug);\n      if (!category) {\n        return res.status(404).json({ message: \"Category not found\" });\n      }\n      res.json(category);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch category\" });\n    }\n  });\n\n  // Products\n  app.get(\"/api/products\", async (req, res) => {\n    try {\n      const { category, featured } = req.query;\n      const products = await storage.getProducts(\n        category as string,\n        featured === \"true\" ? true : featured === \"false\" ? false : undefined\n      );\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  app.get(\"/api/products/search\", async (req, res) => {\n    try {\n      const { q } = req.query;\n      if (!q || typeof q !== \"string\") {\n        return res.status(400).json({ message: \"Search query is required\" });\n      }\n      const products = await storage.searchProducts(q);\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to search products\" });\n    }\n  });\n\n  app.get(\"/api/products/:slug\", async (req, res) => {\n    try {\n      const product = await storage.getProductBySlug(req.params.slug);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch product\" });\n    }\n  });\n\n  // Cart\n  app.get(\"/api/cart\", async (req, res) => {\n    try {\n      const sessionId = \"anonymous\";\n      const cartItems = await storage.getCartItems(sessionId);\n      res.json(cartItems);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch cart items\" });\n    }\n  });\n\n  app.post(\"/api/cart\", async (req, res) => {\n    try {\n      const sessionId = \"anonymous\";\n      const validatedData = insertCartItemSchema.parse({\n        ...req.body,\n        sessionId\n      });\n      \n      const cartItem = await storage.addCartItem(validatedData);\n      res.status(201).json(cartItem);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid cart item data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to add item to cart\" });\n    }\n  });\n\n  app.patch(\"/api/cart/:id\", async (req, res) => {\n    try {\n      const { quantity } = req.body;\n      if (typeof quantity !== \"number\" || quantity < 0) {\n        return res.status(400).json({ message: \"Valid quantity is required\" });\n      }\n      \n      const cartItem = await storage.updateCartItem(req.params.id, quantity);\n      if (!cartItem) {\n        return res.status(404).json({ message: \"Cart item not found\" });\n      }\n      \n      res.json(cartItem);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update cart item\" });\n    }\n  });\n\n  app.delete(\"/api/cart/:id\", async (req, res) => {\n    try {\n      await storage.removeCartItem(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to remove cart item\" });\n    }\n  });\n\n  app.delete(\"/api/cart\", async (req, res) => {\n    try {\n      const sessionId = \"anonymous\";\n      await storage.clearCart(sessionId);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to clear cart\" });\n    }\n  });\n\n  // Virtual Try-On endpoint\n  app.post(\"/api/virtual-tryon\", processVirtualTryOn);\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":4261},"server/storage.ts":{"content":"import { type Product, type Category, type CartItem, type InsertProduct, type InsertCategory, type InsertCartItem, type ProductWithCategory, type CartItemWithProduct } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Categories\n  getCategories(): Promise<Category[]>;\n  getCategoryBySlug(slug: string): Promise<Category | undefined>;\n  createCategory(category: InsertCategory): Promise<Category>;\n\n  // Products\n  getProducts(categorySlug?: string, featured?: boolean): Promise<ProductWithCategory[]>;\n  getProductBySlug(slug: string): Promise<ProductWithCategory | undefined>;\n  getProductById(id: string): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  searchProducts(query: string): Promise<ProductWithCategory[]>;\n\n  // Cart\n  getCartItems(sessionId: string): Promise<CartItemWithProduct[]>;\n  addCartItem(item: InsertCartItem): Promise<CartItem>;\n  updateCartItem(id: string, quantity: number): Promise<CartItem | undefined>;\n  removeCartItem(id: string): Promise<void>;\n  clearCart(sessionId: string): Promise<void>;\n}\n\nexport class MemStorage implements IStorage {\n  private categories: Map<string, Category>;\n  private products: Map<string, Product>;\n  private cartItems: Map<string, CartItem>;\n\n  constructor() {\n    this.categories = new Map();\n    this.products = new Map();\n    this.cartItems = new Map();\n    this.seedData();\n  }\n\n  private seedData() {\n    // Seed categories\n    const womenCategory: Category = {\n      id: randomUUID(),\n      name: \"WOMAN\",\n      slug: \"woman\",\n      description: \"Women's fashion collection\",\n      imageUrl: \"https://images.unsplash.com/photo-1594633312681-425c7b97ccd1?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=1000\"\n    };\n\n    const menCategory: Category = {\n      id: randomUUID(),\n      name: \"MAN\",\n      slug: \"man\",\n      description: \"Men's fashion collection\",\n      imageUrl: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=1000\"\n    };\n\n    const kidsCategory: Category = {\n      id: randomUUID(),\n      name: \"KIDS\",\n      slug: \"kids\",\n      description: \"Children's fashion collection\",\n      imageUrl: \"https://images.unsplash.com/photo-1503454537195-1dcabb73ffb9?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=1000\"\n    };\n\n    const homeCategory: Category = {\n      id: randomUUID(),\n      name: \"HOME\",\n      slug: \"home\",\n      description: \"Home decor and accessories\",\n      imageUrl: \"https://images.unsplash.com/photo-1586023492125-27b2c045efd7?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=1000\"\n    };\n\n    [womenCategory, menCategory, kidsCategory, homeCategory].forEach(category => {\n      this.categories.set(category.id, category);\n    });\n\n    // Seed products\n    const sampleProducts: Omit<Product, 'id' | 'createdAt'>[] = [\n      {\n        name: \"WOOL BLEND COAT\",\n        slug: \"wool-blend-coat\",\n        description: \"Elegant wool blend coat with minimalist design\",\n        price: \"12990.00\",\n        categoryId: womenCategory.id,\n        images: [\"https://images.unsplash.com/photo-1551698618-1dfe5d97d256?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=800\"],\n        sizes: [\"XS\", \"S\", \"M\", \"L\", \"XL\"],\n        colors: [\"Black\", \"Camel\", \"Navy\"],\n        inStock: true,\n        featured: true\n      },\n      {\n        name: \"LEATHER HANDBAG\",\n        slug: \"leather-handbag\",\n        description: \"Premium leather handbag with sophisticated styling\",\n        price: \"8990.00\",\n        categoryId: womenCategory.id,\n        images: [\"https://images.unsplash.com/photo-1584917865442-de89df76afd3?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=800\"],\n        sizes: [\"One Size\"],\n        colors: [\"Black\", \"Brown\", \"Tan\"],\n        inStock: true,\n        featured: true\n      },\n      {\n        name: \"COTTON POPLIN SHIRT\",\n        slug: \"cotton-poplin-shirt\",\n        description: \"Classic white cotton shirt with clean lines\",\n        price: \"3990.00\",\n        categoryId: womenCategory.id,\n        images: [\"https://images.unsplash.com/photo-1594633313593-bab3825d0caf?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=800\"],\n        sizes: [\"XS\", \"S\", \"M\", \"L\", \"XL\"],\n        colors: [\"White\", \"Light Blue\"],\n        inStock: true,\n        featured: true\n      },\n      {\n        name: \"STATEMENT NECKLACE\",\n        slug: \"statement-necklace\",\n        description: \"Bold statement necklace for elegant occasions\",\n        price: \"2990.00\",\n        categoryId: womenCategory.id,\n        images: [\"https://images.unsplash.com/photo-1515562141207-7a88fb7ce338?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=800\"],\n        sizes: [\"One Size\"],\n        colors: [\"Gold\", \"Silver\"],\n        inStock: true,\n        featured: true\n      },\n      {\n        name: \"TAILORED BLAZER\",\n        slug: \"tailored-blazer\",\n        description: \"Professional blazer with perfect fit\",\n        price: \"9990.00\",\n        categoryId: womenCategory.id,\n        images: [\"https://images.unsplash.com/photo-1544441892-794166f1e3be?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=800\"],\n        sizes: [\"XS\", \"S\", \"M\", \"L\", \"XL\"],\n        colors: [\"Black\", \"Navy\", \"Charcoal\"],\n        inStock: true,\n        featured: true\n      },\n      {\n        name: \"OVERSIZED SUNGLASSES\",\n        slug: \"oversized-sunglasses\",\n        description: \"Designer sunglasses with UV protection\",\n        price: \"3590.00\",\n        categoryId: womenCategory.id,\n        images: [\"https://images.unsplash.com/photo-1511499767150-a48a237f0083?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=800\"],\n        sizes: [\"One Size\"],\n        colors: [\"Black\", \"Tortoise\"],\n        inStock: true,\n        featured: true\n      },\n      {\n        name: \"PRINTED SILK SCARF\",\n        slug: \"printed-silk-scarf\",\n        description: \"Luxurious silk scarf with artistic print\",\n        price: \"4990.00\",\n        categoryId: womenCategory.id,\n        images: [\"https://images.unsplash.com/photo-1601924994987-69e26d50dc26?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=800\"],\n        sizes: [\"One Size\"],\n        colors: [\"Multicolor\"],\n        inStock: true,\n        featured: true\n      },\n      {\n        name: \"LEATHER OXFORD SHOES\",\n        slug: \"leather-oxford-shoes\",\n        description: \"Classic leather shoes with timeless appeal\",\n        price: \"11990.00\",\n        categoryId: menCategory.id,\n        images: [\"https://images.unsplash.com/photo-1549298916-b41d501d3772?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=800\"],\n        sizes: [\"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\"],\n        colors: [\"Black\", \"Brown\"],\n        inStock: true,\n        featured: true\n      }\n    ];\n\n    sampleProducts.forEach(product => {\n      const id = randomUUID();\n      this.products.set(id, {\n        ...product,\n        id,\n        createdAt: new Date()\n      });\n    });\n  }\n\n  async getCategories(): Promise<Category[]> {\n    return Array.from(this.categories.values());\n  }\n\n  async getCategoryBySlug(slug: string): Promise<Category | undefined> {\n    return Array.from(this.categories.values()).find(cat => cat.slug === slug);\n  }\n\n  async createCategory(category: InsertCategory): Promise<Category> {\n    const id = randomUUID();\n    const newCategory: Category = { \n      ...category, \n      id,\n      description: category.description ?? null,\n      imageUrl: category.imageUrl ?? null\n    };\n    this.categories.set(id, newCategory);\n    return newCategory;\n  }\n\n  async getProducts(categorySlug?: string, featured?: boolean): Promise<ProductWithCategory[]> {\n    let products = Array.from(this.products.values());\n\n    if (categorySlug) {\n      const category = await this.getCategoryBySlug(categorySlug);\n      if (category) {\n        products = products.filter(p => p.categoryId === category.id);\n      }\n    }\n\n    if (featured !== undefined) {\n      products = products.filter(p => p.featured === featured);\n    }\n\n    return products.map(product => ({\n      ...product,\n      category: product.categoryId ? this.categories.get(product.categoryId) || null : null\n    }));\n  }\n\n  async getProductBySlug(slug: string): Promise<ProductWithCategory | undefined> {\n    const product = Array.from(this.products.values()).find(p => p.slug === slug);\n    if (!product) return undefined;\n\n    return {\n      ...product,\n      category: product.categoryId ? this.categories.get(product.categoryId) || null : null\n    };\n  }\n\n  async getProductById(id: string): Promise<Product | undefined> {\n    return this.products.get(id);\n  }\n\n  async createProduct(product: InsertProduct): Promise<Product> {\n    const id = randomUUID();\n    const newProduct: Product = { \n      ...product, \n      id, \n      createdAt: new Date(),\n      description: product.description ?? null,\n      categoryId: product.categoryId ?? null,\n      images: product.images ?? [],\n      sizes: product.sizes ?? [],\n      colors: product.colors ?? []\n    };\n    this.products.set(id, newProduct);\n    return newProduct;\n  }\n\n  async searchProducts(query: string): Promise<ProductWithCategory[]> {\n    const searchTerm = query.toLowerCase();\n    const products = Array.from(this.products.values()).filter(product =>\n      product.name.toLowerCase().includes(searchTerm) ||\n      product.description?.toLowerCase().includes(searchTerm)\n    );\n\n    return products.map(product => ({\n      ...product,\n      category: product.categoryId ? this.categories.get(product.categoryId) || null : null\n    }));\n  }\n\n  async getCartItems(sessionId: string): Promise<CartItemWithProduct[]> {\n    const items = Array.from(this.cartItems.values()).filter(item => item.sessionId === sessionId);\n    \n    return items.map(item => ({\n      ...item,\n      product: this.products.get(item.productId!)!\n    }));\n  }\n\n  async addCartItem(item: InsertCartItem): Promise<CartItem> {\n    const id = randomUUID();\n    const newItem: CartItem = { \n      ...item, \n      id,\n      size: item.size ?? null,\n      color: item.color ?? null,\n      productId: item.productId ?? null\n    };\n    this.cartItems.set(id, newItem);\n    return newItem;\n  }\n\n  async updateCartItem(id: string, quantity: number): Promise<CartItem | undefined> {\n    const item = this.cartItems.get(id);\n    if (!item) return undefined;\n\n    const updatedItem = { ...item, quantity };\n    this.cartItems.set(id, updatedItem);\n    return updatedItem;\n  }\n\n  async removeCartItem(id: string): Promise<void> {\n    this.cartItems.delete(id);\n  }\n\n  async clearCart(sessionId: string): Promise<void> {\n    const itemsToRemove = Array.from(this.cartItems.entries())\n      .filter(([_, item]) => item.sessionId === sessionId)\n      .map(([id]) => id);\n    \n    itemsToRemove.forEach(id => this.cartItems.delete(id));\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":10720},"server/virtual-tryon.ts":{"content":"import { Request, Response } from 'express';\n\n// Virtual Try-On API endpoint for Google Vertex AI integration\nexport async function processVirtualTryOn(req: Request, res: Response) {\n  try {\n    const { personImage, productImage } = req.body;\n    \n    if (!personImage || !productImage) {\n      return res.status(400).json({\n        error: 'Both person image and product image are required'\n      });\n    }\n\n    // For now, we'll return a demo response\n    // In production, this would integrate with Google Vertex AI Virtual Try-On API\n    // Requires: GOOGLE_CLOUD_PROJECT_ID and GOOGLE_APPLICATION_CREDENTIALS\n    \n    const mockResponse = {\n      success: true,\n      resultImage: personImage, // In demo mode, return the original image\n      message: 'Virtual try-on completed (Demo Mode)',\n      processingTime: '2.5s'\n    };\n\n    // Simulate processing time\n    setTimeout(() => {\n      res.json(mockResponse);\n    }, 2500);\n\n  } catch (error) {\n    console.error('Virtual try-on error:', error);\n    res.status(500).json({\n      error: 'Virtual try-on processing failed',\n      message: 'Please try again or contact support'\n    });\n  }\n}\n\n// Google Vertex AI Virtual Try-On integration (commented for future implementation)\n/*\nimport { VertexAI } from '@google-cloud/vertexai';\n\nasync function callVertexAITryOn(personImageBase64: string, productImageBase64: string) {\n  const vertex_ai = new VertexAI({\n    project: process.env.GOOGLE_CLOUD_PROJECT_ID,\n    location: 'us-central1',\n  });\n\n  const model = 'virtual-try-on-preview-08-04';\n  const generativeModel = vertex_ai.preview.getGenerativeModel({\n    model: model,\n  });\n\n  const request = {\n    instances: [{\n      personImage: {\n        image: { bytesBase64Encoded: personImageBase64 }\n      },\n      productImages: [{\n        image: { bytesBase64Encoded: productImageBase64 }\n      }]\n    }],\n    parameters: {\n      sampleCount: 1\n    }\n  };\n\n  const response = await generativeModel.generateContent(request);\n  return response;\n}\n*/","size_bytes":2002},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, boolean, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const categories = pgTable(\"categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  slug: text(\"slug\").notNull().unique(),\n  description: text(\"description\"),\n  imageUrl: text(\"image_url\"),\n});\n\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  slug: text(\"slug\").notNull().unique(),\n  description: text(\"description\"),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  categoryId: varchar(\"category_id\").references(() => categories.id),\n  images: jsonb(\"images\").$type<string[]>().notNull().default([]),\n  sizes: jsonb(\"sizes\").$type<string[]>().notNull().default([]),\n  colors: jsonb(\"colors\").$type<string[]>().notNull().default([]),\n  inStock: boolean(\"in_stock\").notNull().default(true),\n  featured: boolean(\"featured\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const cartItems = pgTable(\"cart_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sessionId: text(\"session_id\").notNull(),\n  productId: varchar(\"product_id\").references(() => products.id),\n  quantity: integer(\"quantity\").notNull().default(1),\n  size: text(\"size\"),\n  color: text(\"color\"),\n});\n\nexport const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCartItemSchema = createInsertSchema(cartItems).omit({\n  id: true,\n});\n\nexport type Category = typeof categories.$inferSelect;\nexport type Product = typeof products.$inferSelect;\nexport type CartItem = typeof cartItems.$inferSelect;\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type InsertCartItem = z.infer<typeof insertCartItemSchema>;\n\nexport interface ProductWithCategory extends Product {\n  category: Category | null;\n}\n\nexport interface CartItemWithProduct extends CartItem {\n  product: Product;\n}\n","size_bytes":2348},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { useState } from \"react\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\nimport Category from \"@/pages/category\";\nimport Product from \"@/pages/product-new\";\nimport Checkout from \"@/pages/checkout\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport SearchModal from \"@/components/search-modal\";\nimport CartModal from \"@/components/cart-modal\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/category/:slug\" component={Category} />\n      <Route path=\"/product/:slug\" component={Product} />\n      <Route path=\"/checkout\" component={Checkout} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  const [searchOpen, setSearchOpen] = useState(false);\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"min-h-screen bg-white\">\n          <Header onSearchOpen={() => setSearchOpen(true)} />\n          <main>\n            <Router />\n          </main>\n          <Footer />\n          <SearchModal isOpen={searchOpen} onClose={() => setSearchOpen(false)} />\n          <CartModal />\n          <Toaster />\n        </div>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1566},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(0, 0%, 0%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(0, 0%, 0%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(0, 0%, 0%);\n  --primary: hsl(0, 0%, 0%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(0, 0%, 96%);\n  --secondary-foreground: hsl(0, 0%, 0%);\n  --muted: hsl(0, 0%, 96%);\n  --muted-foreground: hsl(0, 0%, 45%);\n  --accent: hsl(0, 0%, 96%);\n  --accent-foreground: hsl(0, 0%, 0%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(0, 0%, 90%);\n  --input: hsl(0, 0%, 90%);\n  --ring: hsl(0, 0%, 0%);\n  --chart-1: hsl(0, 0%, 0%);\n  --chart-2: hsl(160, 60%, 45%);\n  --chart-3: hsl(30, 80%, 55%);\n  --chart-4: hsl(280, 65%, 60%);\n  --chart-5: hsl(340, 75%, 55%);\n  --font-sans: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Helvetica', 'Arial', sans-serif;\n  --font-serif: 'Georgia', serif;\n  --font-mono: 'Menlo', monospace;\n  --radius: 0;\n  --shadow-2xs: 0px 1px 2px 0px hsl(0, 0%, 0%, 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(0, 0%, 0%, 0.1), 0px 1px 2px 0px hsl(0, 0%, 0%, 0.06);\n  --shadow-sm: 0px 1px 3px 0px hsl(0, 0%, 0%, 0.1), 0px 1px 2px 0px hsl(0, 0%, 0%, 0.06);\n  --shadow: 0px 1px 3px 0px hsl(0, 0%, 0%, 0.1), 0px 1px 2px 0px hsl(0, 0%, 0%, 0.06);\n  --shadow-md: 0px 4px 6px -1px hsl(0, 0%, 0%, 0.1), 0px 2px 4px -1px hsl(0, 0%, 0%, 0.06);\n  --shadow-lg: 0px 10px 15px -3px hsl(0, 0%, 0%, 0.1), 0px 4px 6px -2px hsl(0, 0%, 0%, 0.05);\n  --shadow-xl: 0px 20px 25px -5px hsl(0, 0%, 0%, 0.1), 0px 10px 10px -5px hsl(0, 0%, 0%, 0.04);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0, 0%, 0%, 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(0, 0%, 98%);\n  --card: hsl(0, 0%, 4%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --popover: hsl(0, 0%, 4%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --primary: hsl(0, 0%, 98%);\n  --primary-foreground: hsl(0, 0%, 9%);\n  --secondary: hsl(0, 0%, 15%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --muted: hsl(0, 0%, 15%);\n  --muted-foreground: hsl(0, 0%, 63%);\n  --accent: hsl(0, 0%, 15%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(0, 0%, 15%);\n  --input: hsl(0, 0%, 15%);\n  --ring: hsl(0, 0%, 83%);\n  --chart-1: hsl(220, 70%, 50%);\n  --chart-2: hsl(160, 60%, 45%);\n  --chart-3: hsl(30, 80%, 55%);\n  --chart-4: hsl(280, 65%, 60%);\n  --chart-5: hsl(340, 75%, 55%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    @apply font-light tracking-wide;\n  }\n}\n\n@layer utilities {\n  .hero-gradient {\n    background: linear-gradient(rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0.2));\n  }\n\n  .category-overlay {\n    background: linear-gradient(transparent, rgba(0, 0, 0, 0.5));\n  }\n\n  .tracking-widest {\n    letter-spacing: 0.3em;\n  }\n\n  .text-shadow {\n    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);\n  }\n\n  .animate-fade-in {\n    animation: fadeIn 2s ease-in-out;\n  }\n\n  .parallax-bg {\n    background-attachment: fixed;\n    background-position: center;\n    background-repeat: no-repeat;\n    background-size: cover;\n  }\n\n  .backdrop-blur-glass {\n    backdrop-filter: blur(10px);\n    background: rgba(255, 255, 255, 0.1);\n  }\n\n  @keyframes fadeIn {\n    from {\n      opacity: 0;\n      transform: translateY(30px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n\n  @keyframes float {\n    0%, 100% {\n      transform: translateY(0px);\n    }\n    50% {\n      transform: translateY(-20px);\n    }\n  }\n\n  .animate-float {\n    animation: float 6s ease-in-out infinite;\n  }\n\n  .glass-morphism {\n    background: rgba(255, 255, 255, 0.1);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n  }\n\n  /* Masonry Grid Animation */\n  @keyframes masonryFade {\n    from {\n      opacity: 0;\n      transform: translateY(20px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n\n  .masonry-item {\n    animation: masonryFade 0.6s ease-out forwards;\n  }\n\n  /* Custom Grid Heights */\n  .grid-item-tall {\n    grid-row: span 2;\n  }\n\n  .grid-item-wide {\n    grid-column: span 2;\n  }\n}\n","size_bytes":4467},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/aesthetic-gallery.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Link } from 'wouter';\n\nexport default function AestheticGallery() {\n  const [currentSection, setCurrentSection] = useState(0);\n\n  const galleryImages = [\n    {\n      image: 'https://images.unsplash.com/photo-1594633312681-425c7b97ccd1?ixlib=rb-4.0.3&auto=format&fit=crop&w=1920&h=1080',\n      title: 'WOMEN',\n      subtitle: 'NEW ARRIVALS',\n      link: '/category/woman'\n    },\n    {\n      image: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=1920&h=1080',\n      title: 'MEN',\n      subtitle: 'SPRING COLLECTION',\n      link: '/category/man'\n    },\n    {\n      image: 'https://images.unsplash.com/photo-1503454537195-1dcabb73ffb9?ixlib=rb-4.0.3&auto=format&fit=crop&w=1920&h=1080',\n      title: 'KIDS',\n      subtitle: 'PLAYFUL STYLES',\n      link: '/category/kids'\n    }\n  ];\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentSection((prev) => (prev + 1) % galleryImages.length);\n    }, 5000);\n    return () => clearInterval(interval);\n  }, [galleryImages.length]);\n\n  return (\n    <section className=\"h-screen overflow-hidden relative\">\n      {/* Background Images */}\n      {galleryImages.map((section, index) => (\n        <div\n          key={index}\n          className={`absolute inset-0 transition-all duration-1000 ${\n            index === currentSection ? 'opacity-100 scale-100' : 'opacity-0 scale-105'\n          }`}\n        >\n          <div\n            className=\"w-full h-full bg-cover bg-center\"\n            style={{ backgroundImage: `url('${section.image}')` }}\n          />\n          <div className=\"absolute inset-0 bg-gradient-to-r from-black/50 to-transparent\" />\n        </div>\n      ))}\n\n      {/* Content Overlay */}\n      <div className=\"absolute inset-0 flex items-center\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-xl\">\n            <div className=\"space-y-6 text-white animate-fade-in\">\n              <p className=\"text-sm font-light tracking-[0.3em] opacity-80\">\n                {galleryImages[currentSection].subtitle}\n              </p>\n              <h2 className=\"text-6xl md:text-8xl font-extralight tracking-[0.2em] text-shadow\">\n                {galleryImages[currentSection].title}\n              </h2>\n              <p className=\"text-lg font-light opacity-90 max-w-md leading-relaxed\">\n                Discover the latest trends and timeless pieces crafted with precision and style.\n              </p>\n              <Button\n                asChild\n                className=\"bg-transparent border border-white text-white px-8 py-3 text-sm font-light tracking-[0.2em] hover:bg-white hover:text-black transition-all duration-300 mt-8\"\n                data-testid=\"button-shop-collection\"\n              >\n                <Link href={galleryImages[currentSection].link}>\n                  SHOP COLLECTION\n                </Link>\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation Dots */}\n      <div className=\"absolute bottom-8 left-6 flex flex-col space-y-4\">\n        {galleryImages.map((_, index) => (\n          <button\n            key={index}\n            onClick={() => setCurrentSection(index)}\n            className={`w-px h-12 transition-all duration-300 ${\n              index === currentSection ? 'bg-white' : 'bg-white/40'\n            }`}\n            data-testid={`button-gallery-nav-${index}`}\n          />\n        ))}\n      </div>\n\n      {/* Floating Elements */}\n      <div className=\"absolute top-1/4 right-12 hidden lg:block\">\n        <div className=\"glass-morphism p-6 rounded-full animate-float\">\n          <span className=\"text-white text-xs font-light tracking-wide\">2024</span>\n        </div>\n      </div>\n\n      <div className=\"absolute bottom-1/4 right-1/4 hidden lg:block\">\n        <div className=\"glass-morphism p-4 rounded-full animate-float\" style={{ animationDelay: '2s' }}>\n          <span className=\"text-white text-xs font-light\">NEW</span>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":4131},"client/src/components/cart-modal.tsx":{"content":"import { Sheet, SheetContent, SheetHeader, SheetTitle } from '@/components/ui/sheet';\nimport { Button } from '@/components/ui/button';\nimport { useCartStore } from '@/lib/cart';\nimport { Trash2, Plus, Minus } from 'lucide-react';\nimport { Link } from 'wouter';\n\nexport default function CartModal() {\n  const {\n    items,\n    isOpen,\n    closeCart,\n    removeItem,\n    updateQuantity,\n    getTotalPrice,\n    getTotalItems,\n  } = useCartStore();\n\n  const totalPrice = getTotalPrice();\n  const totalItems = getTotalItems();\n\n  return (\n    <Sheet open={isOpen} onOpenChange={closeCart}>\n      <SheetContent className=\"w-full sm:max-w-md\" data-testid=\"modal-cart\">\n        <SheetHeader className=\"border-b border-gray-200 pb-4\">\n          <SheetTitle className=\"flex items-center justify-between\">\n            <span className=\"text-xl font-extralight tracking-[0.1em] uppercase\">Shopping Bag</span>\n            <span className=\"text-xs text-gray-600 font-light tracking-wide\" data-testid=\"text-cart-item-count\">\n              ({totalItems})\n            </span>\n          </SheetTitle>\n        </SheetHeader>\n\n        {items.length === 0 ? (\n          <div className=\"flex flex-col items-center justify-center h-64\" data-testid=\"text-cart-empty\">\n            <p className=\"text-gray-500 mb-6 font-light tracking-wide\">Your bag is empty</p>\n            <Button onClick={closeCart} variant=\"outline\" className=\"font-light tracking-wide\" data-testid=\"button-continue-shopping\">\n              Continue Shopping\n            </Button>\n          </div>\n        ) : (\n          <div className=\"flex flex-col h-full\">\n            {/* Cart Items */}\n            <div className=\"flex-1 overflow-y-auto py-4 space-y-4\" data-testid=\"list-cart-items\">\n              {items.map((item) => (\n                <div key={item.id} className=\"flex space-x-4 p-2 border-b border-gray-100\">\n                  <Link\n                    href={`/product/${item.product?.slug || ''}`}\n                    onClick={closeCart}\n                    data-testid={`link-cart-product-${item.product?.slug || item.id}`}\n                  >\n                    <img\n                      src={item.product?.images?.[0] || 'https://images.unsplash.com/photo-1441986300917-64674bd600d8?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&h=100'}\n                      alt={item.product?.name || 'Product'}\n                      className=\"w-20 h-24 object-cover\"\n                    />\n                  </Link>\n                  <div className=\"flex-1 space-y-2\">\n                    <Link\n                      href={`/product/${item.product?.slug || ''}`}\n                      onClick={closeCart}\n                      className=\"block\"\n                      data-testid={`link-cart-product-name-${item.product?.slug || item.id}`}\n                    >\n                      <h3 className=\"font-light text-sm hover:underline tracking-wide\">\n                        {item.product?.name || 'Product'}\n                      </h3>\n                    </Link>\n                    {item.size && (\n                      <p className=\"text-sm text-gray-600\" data-testid={`text-cart-size-${item.id}`}>\n                        Size: {item.size}\n                      </p>\n                    )}\n                    {item.color && (\n                      <p className=\"text-sm text-gray-600\" data-testid={`text-cart-color-${item.id}`}>\n                        Color: {item.color}\n                      </p>\n                    )}\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => updateQuantity(item.id, Math.max(0, item.quantity - 1))}\n                          disabled={item.quantity <= 1}\n                          data-testid={`button-decrease-quantity-${item.id}`}\n                        >\n                          <Minus size={12} />\n                        </Button>\n                        <span className=\"text-sm w-8 text-center\" data-testid={`text-quantity-${item.id}`}>\n                          {item.quantity}\n                        </span>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => updateQuantity(item.id, item.quantity + 1)}\n                          data-testid={`button-increase-quantity-${item.id}`}\n                        >\n                          <Plus size={12} />\n                        </Button>\n                      </div>\n                      <p className=\"text-sm font-medium\" data-testid={`text-cart-price-${item.id}`}>\n                        ₹{(parseFloat(item.product?.price || '0') * item.quantity).toLocaleString('en-IN', {\n                          minimumFractionDigits: 2,\n                        })}\n                      </p>\n                    </div>\n                  </div>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => removeItem(item.id)}\n                    className=\"text-gray-400 hover:text-red-500\"\n                    data-testid={`button-remove-item-${item.id}`}\n                  >\n                    <Trash2 size={16} />\n                  </Button>\n                </div>\n              ))}\n            </div>\n\n            {/* Cart Total */}\n            <div className=\"border-t border-gray-200 pt-6 space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-lg font-light tracking-wide\">Total</span>\n                <span className=\"text-lg font-light\" data-testid=\"text-cart-total\">\n                  ₹{totalPrice.toLocaleString('en-IN', {\n                    minimumFractionDigits: 2,\n                  })}\n                </span>\n              </div>\n              <Link href=\"/checkout\" onClick={closeCart}>\n                <Button\n                  className=\"w-full py-4 bg-black text-white font-light tracking-[0.1em] text-xs uppercase hover:bg-gray-800 transition-colors\"\n                  data-testid=\"button-checkout\"\n                >\n                  Proceed to Checkout\n                </Button>\n              </Link>\n            </div>\n          </div>\n        )}\n      </SheetContent>\n    </Sheet>\n  );\n}\n","size_bytes":6420},"client/src/components/category-grid.tsx":{"content":"import { Link } from 'wouter';\nimport { useQuery } from '@tanstack/react-query';\nimport type { Category } from '@shared/schema';\n\nexport default function CategoryGrid() {\n  const { data: categories = [], isLoading } = useQuery({\n    queryKey: ['/api/categories'],\n  }) as { data: Category[]; isLoading: boolean };\n\n  if (isLoading) {\n    return (\n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {Array.from({ length: 3 }).map((_, i) => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"bg-gray-200 h-88 rounded-lg\"></div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section className=\"py-16\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {categories.slice(0, 3).map((category) => (\n            <Link\n              key={category.id}\n              href={`/category/${category.slug}`}\n              className=\"group cursor-pointer\"\n              data-testid={`link-category-${category.slug}`}\n            >\n              <div className=\"relative overflow-hidden\">\n                <img\n                  src={category.imageUrl || 'https://images.unsplash.com/photo-1441986300917-64674bd600d8?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=1000'}\n                  alt={`${category.name} Fashion`}\n                  className=\"w-full h-88 object-cover group-hover:scale-105 transition-transform duration-500\"\n                />\n                <div className=\"absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-10 transition-all duration-300\"></div>\n                <div className=\"absolute bottom-0 left-0 right-0 category-overlay\">\n                  <div className=\"p-6 text-white\">\n                    <h2 className=\"text-2xl font-light tracking-wide text-shadow\" data-testid={`text-category-name-${category.slug}`}>\n                      {category.name}\n                    </h2>\n                    <p className=\"text-sm mt-2 opacity-90 text-shadow\" data-testid={`text-category-description-${category.slug}`}>\n                      New Collection\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </Link>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2460},"client/src/components/floating-models.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Link } from 'wouter';\n\nexport default function FloatingModels() {\n  const [visibleModels, setVisibleModels] = useState([0]);\n\n  const models = [\n    {\n      image: 'https://images.unsplash.com/photo-1551698618-1dfe5d97d256?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=1200',\n      name: 'WINTER COATS',\n      price: 'FROM ₹12,990',\n      link: '/category/woman'\n    },\n    {\n      image: 'https://images.unsplash.com/photo-1584917865442-de89df76afd3?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=1200',\n      name: 'LEATHER GOODS',\n      price: 'FROM ₹8,990',\n      link: '/category/woman'\n    },\n    {\n      image: 'https://images.unsplash.com/photo-1594633313593-bab3825d0caf?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=1200',\n      name: 'CLASSIC SHIRTS',\n      price: 'FROM ₹3,990',\n      link: '/category/woman'\n    },\n    {\n      image: 'https://images.unsplash.com/photo-1515562141207-7a88fb7ce338?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=1200',\n      name: 'ACCESSORIES',\n      price: 'FROM ₹2,990',\n      link: '/category/woman'\n    }\n  ];\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setVisibleModels(prev => {\n        const nextIndex = (Math.max(...prev) + 1) % models.length;\n        return [...prev.slice(-2), nextIndex];\n      });\n    }, 3000);\n    return () => clearInterval(interval);\n  }, [models.length]);\n\n  return (\n    <section className=\"py-20 bg-gray-50 overflow-hidden\">\n      <div className=\"container mx-auto px-6\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl md:text-6xl font-extralight tracking-[0.2em] text-black mb-8\">\n            EDITORIAL\n          </h2>\n          <p className=\"text-lg font-light text-gray-600 max-w-2xl mx-auto\">\n            Experience fashion through our lens. Each piece tells a story of contemporary elegance.\n          </p>\n        </div>\n\n        {/* Infinite Scroll Container */}\n        <div className=\"relative h-96 overflow-hidden\">\n          <div className=\"flex space-x-8 animate-pulse\">\n            {models.map((model, index) => (\n              <div\n                key={index}\n                className={`flex-shrink-0 w-64 h-80 relative group cursor-pointer transition-all duration-700 ${\n                  visibleModels.includes(index) \n                    ? 'opacity-100 transform translate-y-0' \n                    : 'opacity-40 transform translate-y-4'\n                }`}\n                style={{\n                  animationDelay: `${index * 0.5}s`,\n                  transform: `translateX(${index * 20}px)`\n                }}\n              >\n                <Link href={model.link}>\n                  <div className=\"relative overflow-hidden rounded-lg shadow-lg\">\n                    <img\n                      src={model.image}\n                      alt={model.name}\n                      className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-700\"\n                    />\n                    <div className=\"absolute inset-0 bg-gradient-to-t from-black/60 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300\" />\n                    <div className=\"absolute bottom-0 left-0 right-0 p-6 text-white transform translate-y-full group-hover:translate-y-0 transition-transform duration-300\">\n                      <h3 className=\"text-lg font-light tracking-wide mb-2\">{model.name}</h3>\n                      <p className=\"text-sm opacity-90\">{model.price}</p>\n                    </div>\n                  </div>\n                </Link>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Floating Text */}\n        <div className=\"flex justify-center mt-16\">\n          <div className=\"text-center space-y-4\">\n            <div className=\"inline-block glass-morphism px-8 py-4 rounded-full\">\n              <span className=\"text-sm font-light tracking-[0.3em] text-gray-800\">\n                SCROLL TO DISCOVER MORE\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Background Decorative Elements */}\n      <div className=\"absolute top-10 left-10 w-32 h-32 border border-gray-200 rounded-full opacity-20 animate-float\"></div>\n      <div className=\"absolute bottom-10 right-10 w-24 h-24 border border-gray-200 rounded-full opacity-30 animate-float\" style={{ animationDelay: '3s' }}></div>\n    </section>\n  );\n}","size_bytes":4433},"client/src/components/footer.tsx":{"content":"import { Link } from 'wouter';\n\nexport default function Footer() {\n  const footerSections = [\n    {\n      title: 'HELP',\n      links: [\n        { name: 'Size Guide', href: '#' },\n        { name: 'Contact Us', href: '#' },\n        { name: 'Exchange & Returns', href: '#' },\n        { name: 'Shipping', href: '#' },\n        { name: 'Payment', href: '#' },\n      ],\n    },\n    {\n      title: 'FOLLOW US',\n      links: [\n        { name: 'Instagram', href: 'https://www.instagram.com/zara/' },\n        { name: 'Facebook', href: 'https://www.facebook.com/Zara' },\n        { name: 'X', href: 'https://x.com/ZARA' },\n        { name: 'Pinterest', href: 'https://es.pinterest.com/zaraofficial' },\n        { name: 'YouTube', href: 'http://www.youtube.com/user/zara' },\n        { name: 'Spotify', href: 'https://open.spotify.com/user/r6ivwuv0ebk346hhxo446pbfv' },\n      ],\n    },\n    {\n      title: 'COMPANY',\n      links: [\n        { name: 'About Us', href: '#' },\n        { name: 'Careers', href: '#' },\n        { name: 'Press', href: '#' },\n        { name: 'Sustainability', href: '#' },\n        { name: 'Investors', href: '#' },\n      ],\n    },\n    {\n      title: 'POLICIES',\n      links: [\n        { name: 'Privacy Policy', href: '#' },\n        { name: 'Terms of Use', href: '#' },\n        { name: 'Cookies', href: '#' },\n        { name: 'Legal Notice', href: '#' },\n      ],\n    },\n  ];\n\n  return (\n    <footer className=\"bg-white border-t border-gray-100\">\n      <div className=\"container mx-auto px-4 py-12\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          {footerSections.map((section) => (\n            <div key={section.title}>\n              <h3 className=\"font-medium mb-4 text-sm tracking-wide\">\n                {section.title}\n              </h3>\n              <ul className=\"space-y-3 text-sm text-gray-600\">\n                {section.links.map((link) => (\n                  <li key={link.name}>\n                    {link.href.startsWith('http') ? (\n                      <a\n                        href={link.href}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        className=\"hover:text-black transition-colors\"\n                        data-testid={`link-${link.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                      >\n                        {link.name}\n                      </a>\n                    ) : (\n                      <Link\n                        href={link.href}\n                        className=\"hover:text-black transition-colors\"\n                        data-testid={`link-${link.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                      >\n                        {link.name}\n                      </Link>\n                    )}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          ))}\n        </div>\n\n        {/* Newsletter Link */}\n        <div className=\"border-t border-gray-100 mt-12 pt-8\">\n          <div className=\"text-center\">\n            <a\n              href=\"https://www.zara.com/in/en/z-newsletter-nl1400.html?v1=11110\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"inline-flex items-center space-x-2 text-sm text-gray-600 hover:text-black transition-colors\"\n              data-testid=\"link-newsletter\"\n            >\n              <span>JOIN OUR NEWSLETTER</span>\n              <span>→</span>\n            </a>\n          </div>\n        </div>\n\n        {/* Copyright */}\n        <div className=\"border-t border-gray-100 mt-8 pt-8 text-center text-xs text-gray-500\">\n          <div className=\"mb-4\">\n            <p>Name and address of the manufacturer:</p>\n            <p className=\"font-medium\">Industria de Diseño Textil, S.A. (INDITEX, S.A.)</p>\n            <p>Avenida de la Diputación, Edificio Inditex, 15143, Arteixo (A Coruña), Spain</p>\n          </div>\n          <p>&copy; 2024 ZARA India. All rights reserved.</p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":4004},"client/src/components/header.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { Search, User, ShoppingBag, Menu, X } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { useCartStore } from '@/lib/cart';\nimport { cn } from '@/lib/utils';\n\ninterface HeaderProps {\n  onSearchOpen: () => void;\n}\n\nexport default function Header({ onSearchOpen }: HeaderProps) {\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const [scrolled, setScrolled] = useState(false);\n  const [location] = useLocation();\n  const { openCart, getTotalItems } = useCartStore();\n\n  useEffect(() => {\n    const handleScroll = () => {\n      setScrolled(window.scrollY > 50);\n    };\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  const navigation = [\n    { name: 'WOMAN', href: '/category/woman' },\n    { name: 'MAN', href: '/category/man' },\n    { name: 'KIDS', href: '/category/kids' },\n    { name: 'HOME', href: '/category/home' },\n    { name: 'SALE', href: '/category/sale' },\n  ];\n\n  const totalItems = getTotalItems();\n\n  return (\n    <>\n      {/* Floating Header */}\n      <header className={cn(\n        \"fixed top-0 left-0 right-0 z-50 transition-all duration-300\",\n        scrolled \n          ? \"bg-white/95 backdrop-blur-md shadow-sm\" \n          : \"bg-transparent\"\n      )}>\n        {/* Top Bar - only show when scrolled */}\n        {scrolled && (\n          <div className=\"hidden md:block bg-black text-white text-xs py-1\">\n            <div className=\"container mx-auto px-6 text-center\">\n              FREE DELIVERY ON ORDERS OVER ₹2,990\n            </div>\n          </div>\n        )}\n\n        {/* Main Navigation */}\n        <nav className=\"container mx-auto px-6 py-6\">\n        <div className=\"flex items-center justify-between\">\n          {/* Mobile Menu Toggle */}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className={cn(\n              \"md:hidden hover:bg-transparent\",\n              scrolled ? \"text-black hover:text-gray-600\" : \"text-white hover:text-gray-200\"\n            )}\n            onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n            data-testid=\"button-toggle-mobile-menu\"\n          >\n            {mobileMenuOpen ? (\n              <X size={20} className={scrolled ? \"\" : \"text-shadow\"} />\n            ) : (\n              <Menu size={20} className={scrolled ? \"\" : \"text-shadow\"} />\n            )}\n          </Button>\n\n          {/* Logo */}\n          <div className={cn(\n            \"font-light tracking-[0.3em] transition-all duration-300\",\n            scrolled \n              ? \"text-3xl md:text-4xl text-black\" \n              : \"text-4xl md:text-6xl text-white text-shadow\"\n          )}>\n            <Link href=\"/\" data-testid=\"link-home\">\n              ZARA\n            </Link>\n          </div>\n\n          {/* Desktop Navigation */}\n          <div className={cn(\n            \"hidden md:flex space-x-8 text-sm font-light tracking-wide transition-colors\",\n            scrolled ? \"text-black\" : \"text-white\"\n          )}>\n            {navigation.map((item) => (\n              <Link\n                key={item.name}\n                href={item.href}\n                className={cn(\n                  'hover:opacity-70 transition-all duration-200',\n                  location === item.href && 'font-normal border-b',\n                  scrolled \n                    ? 'hover:text-gray-600 border-black' \n                    : 'hover:text-gray-200 border-white text-shadow'\n                )}\n                data-testid={`link-${item.name.toLowerCase()}`}\n              >\n                {item.name}\n              </Link>\n            ))}\n          </div>\n\n          {/* Action Icons */}\n          <div className={cn(\n            \"flex items-center space-x-4 text-lg transition-colors\",\n            scrolled ? \"text-black\" : \"text-white\"\n          )}>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onSearchOpen}\n              className={cn(\n                \"hover:bg-transparent\",\n                scrolled ? \"hover:text-gray-600\" : \"hover:text-gray-200\"\n              )}\n              data-testid=\"button-open-search\"\n            >\n              <Search size={20} className={scrolled ? \"\" : \"text-shadow\"} />\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className={cn(\n                \"hover:bg-transparent\",\n                scrolled ? \"hover:text-gray-600\" : \"hover:text-gray-200\"\n              )}\n              data-testid=\"button-open-account\"\n            >\n              <User size={20} className={scrolled ? \"\" : \"text-shadow\"} />\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className={cn(\n                \"relative hover:bg-transparent\",\n                scrolled ? \"hover:text-gray-600\" : \"hover:text-gray-200\"\n              )}\n              onClick={openCart}\n              data-testid=\"button-open-cart\"\n            >\n              <ShoppingBag size={20} className={scrolled ? \"\" : \"text-shadow\"} />\n              {totalItems > 0 && (\n                <span\n                  className={cn(\n                    \"absolute -top-2 -right-2 text-xs rounded-full w-5 h-5 flex items-center justify-center\",\n                    scrolled \n                      ? \"bg-black text-white\" \n                      : \"bg-white text-black\"\n                  )}\n                  data-testid=\"text-cart-count\"\n                >\n                  {totalItems}\n                </span>\n              )}\n            </Button>\n          </div>\n        </div>\n\n        {/* Mobile Navigation */}\n        {mobileMenuOpen && (\n          <div className=\"md:hidden mt-4 bg-white/95 backdrop-blur-md\">\n            <div className=\"flex flex-col space-y-4 text-center py-4\">\n              {navigation.map((item) => (\n                <Link\n                  key={item.name}\n                  href={item.href}\n                  className=\"py-2 text-black font-light tracking-wide hover:opacity-70 transition-opacity\"\n                  onClick={() => setMobileMenuOpen(false)}\n                  data-testid={`link-mobile-${item.name.toLowerCase()}`}\n                >\n                  {item.name}\n                </Link>\n              ))}\n            </div>\n          </div>\n        )}\n      </nav>\n    </header>\n    </>\n  );\n}\n","size_bytes":6466},"client/src/components/hero-section.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { Link } from 'wouter';\nimport { useEffect, useState } from 'react';\n\nexport default function HeroSection() {\n  const [currentImage, setCurrentImage] = useState(0);\n  \n  const heroImages = [\n    'https://images.unsplash.com/photo-1515886657613-9f3515b0c78f?ixlib=rb-4.0.3&auto=format&fit=crop&w=2000&h=1200',\n    'https://images.unsplash.com/photo-1441986300917-64674bd600d8?ixlib=rb-4.0.3&auto=format&fit=crop&w=2000&h=1200',\n    'https://images.unsplash.com/photo-1529139574466-a303027c1d8b?ixlib=rb-4.0.3&auto=format&fit=crop&w=2000&h=1200'\n  ];\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentImage((prev) => (prev + 1) % heroImages.length);\n    }, 4000);\n    return () => clearInterval(interval);\n  }, [heroImages.length]);\n\n  return (\n    <section className=\"relative h-screen overflow-hidden\">\n      {/* Background Image Carousel */}\n      <div className=\"absolute inset-0\">\n        {heroImages.map((image, index) => (\n          <div\n            key={index}\n            className={`absolute inset-0 bg-cover bg-center bg-no-repeat transition-opacity duration-1000 ${\n              index === currentImage ? 'opacity-100' : 'opacity-0'\n            }`}\n            style={{ backgroundImage: `url('${image}')` }}\n          />\n        ))}\n        <div className=\"absolute inset-0 bg-black/20\"></div>\n      </div>\n\n      {/* Hero Content */}\n      <div className=\"relative z-10 h-full flex items-center justify-center\">\n        <div className=\"text-center text-white\">\n          <h1 className=\"text-7xl md:text-9xl font-extralight tracking-[0.3em] mb-12 text-shadow animate-fade-in\" data-testid=\"text-hero-title\">\n            THE NEW\n          </h1>\n          <div className=\"space-y-4\">\n            <p className=\"text-lg md:text-xl font-light tracking-wide text-shadow opacity-90\">\n              SPRING COLLECTION 2024\n            </p>\n            <Button\n              asChild\n              className=\"bg-transparent border border-white text-white px-12 py-4 text-sm font-light tracking-[0.2em] hover:bg-white hover:text-black transition-all duration-300\"\n              data-testid=\"button-view-all\"\n            >\n              <Link href=\"/category/woman\">DISCOVER</Link>\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Scroll Indicator */}\n      <div className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2 text-white animate-bounce\">\n        <div className=\"flex flex-col items-center space-y-2\">\n          <span className=\"text-xs font-light tracking-wide text-shadow\" data-testid=\"text-scroll-down\">\n            SCROLL TO EXPLORE\n          </span>\n          <div className=\"w-px h-8 bg-white/60\"></div>\n        </div>\n      </div>\n\n      {/* Image Indicators */}\n      <div className=\"absolute bottom-8 right-8 flex space-x-2\">\n        {heroImages.map((_, index) => (\n          <button\n            key={index}\n            onClick={() => setCurrentImage(index)}\n            className={`w-2 h-2 rounded-full transition-all duration-300 ${\n              index === currentImage ? 'bg-white' : 'bg-white/40'\n            }`}\n            data-testid={`button-hero-indicator-${index}`}\n          />\n        ))}\n      </div>\n    </section>\n  );\n}\n","size_bytes":3271},"client/src/components/model-grid.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Link } from 'wouter';\n\nexport default function ModelGrid() {\n  const [visibleItems, setVisibleItems] = useState([0, 1, 2]);\n\n  const modelImages = [\n    {\n      image: 'https://images.unsplash.com/photo-1594633312681-425c7b97ccd1?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=900',\n      title: 'THE SUIT',\n      category: 'BLAZERS',\n      link: '/category/woman',\n      gridClass: 'row-span-2'\n    },\n    {\n      image: 'https://images.unsplash.com/photo-1515372039744-b8f02a3ae446?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=600',\n      title: 'LEATHER EDIT',\n      category: 'JACKETS',\n      link: '/category/woman',\n      gridClass: ''\n    },\n    {\n      image: 'https://images.unsplash.com/photo-1503454537195-1dcabb73ffb9?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=800',\n      title: 'MINIMALIST',\n      category: 'DRESSES',\n      link: '/category/woman',\n      gridClass: 'col-span-2'\n    },\n    {\n      image: 'https://images.unsplash.com/photo-1551698618-1dfe5d97d256?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=700',\n      title: 'KNITWEAR',\n      category: 'SWEATERS',\n      link: '/category/woman',\n      gridClass: ''\n    },\n    {\n      image: 'https://images.unsplash.com/photo-1584917865442-de89df76afd3?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=900',\n      title: 'OUTERWEAR',\n      category: 'COATS',\n      link: '/category/woman',\n      gridClass: 'row-span-2'\n    },\n    {\n      image: 'https://images.unsplash.com/photo-1515562141207-7a88fb7ce338?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=600',\n      title: 'BASICS',\n      category: 'ESSENTIALS',\n      link: '/category/woman',\n      gridClass: ''\n    },\n    {\n      image: 'https://images.unsplash.com/photo-1469334031218-e382a71b716b?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=800',\n      title: 'ACCESSORIES',\n      category: 'BAGS & SHOES',\n      link: '/category/woman',\n      gridClass: 'col-span-2'\n    },\n    {\n      image: 'https://images.unsplash.com/photo-1529139574466-a303027c1d8b?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=700',\n      title: 'DENIM',\n      category: 'JEANS',\n      link: '/category/woman',\n      gridClass: ''\n    }\n  ];\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setVisibleItems(prev => {\n        const nextItems = [...prev];\n        const randomIndex = Math.floor(Math.random() * modelImages.length);\n        if (!nextItems.includes(randomIndex)) {\n          nextItems.shift();\n          nextItems.push(randomIndex);\n        }\n        return nextItems;\n      });\n    }, 4000);\n    return () => clearInterval(interval);\n  }, [modelImages.length]);\n\n  return (\n    <section className=\"py-20 bg-gray-50\">\n      <div className=\"container mx-auto px-6\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-5xl md:text-7xl font-extralight tracking-[0.2em] text-black mb-8\">\n            STUDIO\n          </h2>\n          <p className=\"text-lg font-light text-gray-600 max-w-2xl mx-auto\">\n            Indoor photoshoot sessions capturing the essence of contemporary fashion\n          </p>\n          <div className=\"mt-8 flex justify-center\">\n            <div className=\"w-16 h-px bg-gray-300\"></div>\n          </div>\n        </div>\n\n        {/* Masonry Grid Layout - Inspired by Zara */}\n        <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 auto-rows-[200px] gap-3 md:gap-4\">\n          {modelImages.map((model, index) => (\n            <div\n              key={index}\n              className={`\n                ${model.gridClass}\n                group cursor-pointer overflow-hidden relative\n                transition-all duration-500 hover:scale-[1.02] hover:z-10\n                ${visibleItems.includes(index) ? 'opacity-100' : 'opacity-80'}\n                masonry-item\n              `}\n              style={{ animationDelay: `${index * 0.1}s` }}\n            >\n              <Link href={model.link}>\n                <div className=\"relative w-full h-full bg-gray-100\">\n                  <img\n                    src={model.image}\n                    alt={model.title}\n                    className=\"w-full h-full object-cover transition-transform duration-700 group-hover:scale-110\"\n                    loading=\"lazy\"\n                  />\n                  \n                  {/* Subtle Overlay for Text Readability */}\n                  <div className=\"absolute inset-0 bg-black/10 group-hover:bg-black/30 transition-all duration-300\" />\n                  \n                  {/* Minimalist Text Overlay */}\n                  <div className=\"absolute bottom-0 left-0 right-0 p-3 md:p-4 text-white transform translate-y-2 opacity-0 group-hover:translate-y-0 group-hover:opacity-100 transition-all duration-300\">\n                    <p className=\"text-xs font-light tracking-[0.15em] opacity-90 mb-1\">\n                      {model.category}\n                    </p>\n                    <h3 className=\"text-sm md:text-base font-light tracking-wide\">\n                      {model.title}\n                    </h3>\n                  </div>\n\n                  {/* Corner Indicator */}\n                  <div className=\"absolute top-3 right-3 w-6 h-6 rounded-full bg-white/10 backdrop-blur-sm flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-300\">\n                    <span className=\"text-white text-xs font-light\">\n                      {index + 1}\n                    </span>\n                  </div>\n                </div>\n              </Link>\n            </div>\n          ))}\n        </div>\n\n        {/* View More */}\n        <div className=\"text-center mt-16\">\n          <Link href=\"/category/woman\">\n            <button className=\"px-12 py-4 border border-black text-black text-sm font-light tracking-[0.2em] hover:bg-black hover:text-white transition-all duration-300\">\n              VIEW ALL COLLECTIONS\n            </button>\n          </Link>\n        </div>\n      </div>\n\n      {/* Floating Design Elements */}\n      <div className=\"absolute top-20 left-10 w-16 h-16 border border-gray-300 rounded-full opacity-20 animate-float hidden lg:block\"></div>\n      <div className=\"absolute bottom-20 right-16 w-12 h-12 border border-gray-300 rounded-full opacity-30 animate-float hidden lg:block\" style={{ animationDelay: '2s' }}></div>\n    </section>\n  );\n}","size_bytes":6321},"client/src/components/newsletter.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { ArrowRight } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function Newsletter() {\n  const [email, setEmail] = useState('');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!email) {\n      toast({\n        title: 'Error',\n        description: 'Please enter your email address.',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    setIsSubmitting(true);\n    \n    // Simulate newsletter subscription\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    toast({\n      title: 'Success',\n      description: 'Thank you for subscribing to our newsletter!',\n    });\n    \n    setEmail('');\n    setIsSubmitting(false);\n  };\n\n  return (\n    <section className=\"py-16 bg-black text-white\">\n      <div className=\"container mx-auto px-4 text-center\">\n        <h2 className=\"text-2xl font-light mb-4 tracking-wide\" data-testid=\"text-newsletter-title\">\n          STAY UPDATED\n        </h2>\n        <p className=\"text-gray-300 mb-8 max-w-md mx-auto\" data-testid=\"text-newsletter-description\">\n          Be the first to know about our new collections, exclusive offers, and fashion insights.\n        </p>\n        <form onSubmit={handleSubmit} className=\"max-w-md mx-auto\">\n          <div className=\"flex\">\n            <Input\n              type=\"email\"\n              placeholder=\"Enter your email address\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              className=\"flex-1 px-4 py-3 bg-transparent border border-gray-600 text-white placeholder-gray-400 focus:outline-none focus:border-white rounded-r-none\"\n              disabled={isSubmitting}\n              data-testid=\"input-newsletter-email\"\n            />\n            <Button\n              type=\"submit\"\n              className=\"bg-white text-black px-6 py-3 hover:bg-gray-100 transition-colors rounded-l-none\"\n              disabled={isSubmitting}\n              data-testid=\"button-newsletter-subscribe\"\n            >\n              <ArrowRight size={16} />\n            </Button>\n          </div>\n        </form>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2378},"client/src/components/product-grid.tsx":{"content":"import { useState } from 'react';\nimport { Link } from 'wouter';\nimport { Heart } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport type { ProductWithCategory } from '@shared/schema';\n\ninterface ProductGridProps {\n  products: ProductWithCategory[];\n  title?: string;\n  className?: string;\n}\n\nexport default function ProductGrid({ products, title, className }: ProductGridProps) {\n  const [likedProducts, setLikedProducts] = useState<Set<string>>(new Set());\n\n  const toggleLike = (productId: string, e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setLikedProducts(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(productId)) {\n        newSet.delete(productId);\n      } else {\n        newSet.add(productId);\n      }\n      return newSet;\n    });\n  };\n\n  if (products.length === 0) {\n    return (\n      <section className={cn(\"py-16\", className)}>\n        <div className=\"container mx-auto px-4\">\n          {title && (\n            <h2 className=\"text-3xl font-light text-center mb-12 tracking-wide\" data-testid=\"text-section-title\">\n              {title}\n            </h2>\n          )}\n          <p className=\"text-center text-gray-500\" data-testid=\"text-no-products\">\n            No products found.\n          </p>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section className={cn(\"py-16\", className)}>\n      <div className=\"container mx-auto px-4\">\n        {title && (\n          <h2 className=\"text-3xl font-light text-center mb-12 tracking-wide\" data-testid=\"text-section-title\">\n            {title}\n          </h2>\n        )}\n        \n        <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6\" data-testid=\"grid-products\">\n          {products.map((product) => (\n            <Link\n              key={product.id}\n              href={`/product/${product.slug}`}\n              className=\"group cursor-pointer\"\n              data-testid={`link-product-${product.slug}`}\n            >\n              <div className=\"relative overflow-hidden bg-white\">\n                <img\n                  src={product.images[0] || 'https://images.unsplash.com/photo-1441986300917-64674bd600d8?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=800'}\n                  alt={product.name}\n                  className=\"w-full h-80 object-cover group-hover:opacity-75 transition-opacity\"\n                />\n                <div className=\"absolute top-4 right-4 opacity-0 group-hover:opacity-100 transition-opacity\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"bg-white p-2 rounded-full shadow-md hover:shadow-lg\"\n                    onClick={(e) => toggleLike(product.id, e)}\n                    data-testid={`button-like-${product.slug}`}\n                  >\n                    <Heart\n                      size={16}\n                      className={cn(\n                        'text-gray-600',\n                        likedProducts.has(product.id) && 'fill-red-500 text-red-500'\n                      )}\n                    />\n                  </Button>\n                </div>\n              </div>\n              <div className=\"mt-4 space-y-2\">\n                <h3 className=\"text-sm font-medium\" data-testid={`text-product-name-${product.slug}`}>\n                  {product.name}\n                </h3>\n                <p className=\"text-sm text-gray-600\" data-testid={`text-product-price-${product.slug}`}>\n                  ₹{parseFloat(product.price).toLocaleString('en-IN', {\n                    minimumFractionDigits: 2,\n                  })}\n                </p>\n              </div>\n            </Link>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3774},"client/src/components/search-modal.tsx":{"content":"import { useState } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { useQuery } from '@tanstack/react-query';\nimport { Search, X } from 'lucide-react';\nimport { Link } from 'wouter';\nimport type { ProductWithCategory } from '@shared/schema';\n\ninterface SearchModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function SearchModal({ isOpen, onClose }: SearchModalProps) {\n  const [query, setQuery] = useState('');\n\n  const { data: searchResults = [], isLoading } = useQuery({\n    queryKey: ['/api/products/search', { q: query }],\n    enabled: query.length > 2,\n  }) as { data: ProductWithCategory[]; isLoading: boolean };\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    // Search is handled by the query above\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-hidden\" data-testid=\"modal-search\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center justify-between\">\n            <span>Search</span>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onClose}\n              data-testid=\"button-close-search\"\n            >\n              <X size={20} />\n            </Button>\n          </DialogTitle>\n        </DialogHeader>\n\n        <form onSubmit={handleSearch} className=\"space-y-4\">\n          <div className=\"relative\">\n            <Input\n              type=\"text\"\n              placeholder=\"Search for products...\"\n              value={query}\n              onChange={(e) => setQuery(e.target.value)}\n              className=\"pr-10\"\n              data-testid=\"input-search\"\n            />\n            <Button\n              type=\"submit\"\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"absolute right-2 top-1/2 -translate-y-1/2\"\n              data-testid=\"button-search\"\n            >\n              <Search size={16} />\n            </Button>\n          </div>\n        </form>\n\n        <div className=\"mt-6 overflow-y-auto max-h-96\">\n          {query.length <= 2 ? (\n            <p className=\"text-center text-gray-500 py-8\" data-testid=\"text-search-instruction\">\n              Start typing to search for products...\n            </p>\n          ) : isLoading ? (\n            <p className=\"text-center text-gray-500 py-8\" data-testid=\"text-search-loading\">\n              Searching...\n            </p>\n          ) : searchResults.length === 0 ? (\n            <p className=\"text-center text-gray-500 py-8\" data-testid=\"text-search-no-results\">\n              No products found for \"{query}\"\n            </p>\n          ) : (\n            <div className=\"space-y-4\" data-testid=\"list-search-results\">\n              {searchResults.map((product) => (\n                <Link\n                  key={product.id}\n                  href={`/product/${product.slug}`}\n                  className=\"flex items-center space-x-4 p-2 hover:bg-gray-50 rounded-lg\"\n                  onClick={onClose}\n                  data-testid={`link-search-result-${product.slug}`}\n                >\n                  <img\n                    src={product.images[0]}\n                    alt={product.name}\n                    className=\"w-16 h-16 object-cover\"\n                  />\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-medium text-sm\">{product.name}</h3>\n                    <p className=\"text-sm text-gray-600\">₹{product.price}</p>\n                    {product.category && (\n                      <p className=\"text-xs text-gray-400\">{product.category.name}</p>\n                    )}\n                  </div>\n                </Link>\n              ))}\n            </div>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":3946},"client/src/components/virtual-tryon.tsx":{"content":"import { useState, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Camera, Upload, Sparkles, X } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface VirtualTryOnProps {\n  productImage: string;\n  productName: string;\n}\n\nexport default function VirtualTryOn({ productImage, productName }: VirtualTryOnProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [userPhoto, setUserPhoto] = useState<string | null>(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [tryOnResult, setTryOnResult] = useState<string | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      if (file.size > 10 * 1024 * 1024) { // 10MB limit\n        toast({\n          title: \"File too large\",\n          description: \"Please upload an image smaller than 10MB\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setUserPhoto(e.target?.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleCameraCapture = () => {\n    // In a real implementation, this would open camera capture\n    toast({\n      title: \"Camera feature\",\n      description: \"Camera capture will be available in the next update\",\n    });\n  };\n\n  const processVirtualTryOn = async () => {\n    if (!userPhoto) return;\n\n    setIsProcessing(true);\n    \n    try {\n      const response = await fetch('/api/virtual-tryon', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          personImage: userPhoto,\n          productImage: productImage,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Virtual try-on failed');\n      }\n\n      const result = await response.json();\n      setTryOnResult(result.resultImage);\n      \n      toast({\n        title: \"Try-on complete!\",\n        description: result.message || \"See how the outfit looks on you\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Try-on failed\",\n        description: \"Please try again or contact support\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const resetTryOn = () => {\n    setUserPhoto(null);\n    setTryOnResult(null);\n    setIsProcessing(false);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogTrigger asChild>\n        <Button \n          variant=\"outline\" \n          className=\"w-full py-3 font-light tracking-wide text-xs uppercase border-gray-300 hover:border-black transition-colors\"\n          data-testid=\"button-virtual-tryon\"\n        >\n          <Sparkles size={14} className=\"mr-2\" />\n          Virtual Try-On\n        </Button>\n      </DialogTrigger>\n      \n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-xl font-light tracking-wide\">\n            Virtual Try-On - {productName}\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mt-6\">\n          {/* Left Side - Upload/Capture */}\n          <div className=\"space-y-6\">\n            <div className=\"text-center\">\n              <h3 className=\"text-lg font-light mb-4\">Upload Your Photo</h3>\n              <p className=\"text-sm text-gray-600 mb-6\">\n                Upload a clear photo of yourself to see how this outfit looks on you\n              </p>\n            </div>\n\n            {!userPhoto ? (\n              <div className=\"space-y-4\">\n                {/* File Upload */}\n                <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-gray-400 transition-colors\">\n                  <input\n                    ref={fileInputRef}\n                    type=\"file\"\n                    accept=\"image/*\"\n                    onChange={handleFileUpload}\n                    className=\"hidden\"\n                    data-testid=\"input-photo-upload\"\n                  />\n                  <Upload size={32} className=\"mx-auto mb-4 text-gray-400\" />\n                  <p className=\"text-sm text-gray-600 mb-4\">\n                    Drag and drop your photo here, or click to browse\n                  </p>\n                  <Button\n                    onClick={() => fileInputRef.current?.click()}\n                    variant=\"outline\"\n                    className=\"mb-4\"\n                    data-testid=\"button-upload-photo\"\n                  >\n                    Choose Photo\n                  </Button>\n                </div>\n\n                {/* Camera Capture */}\n                <div className=\"text-center\">\n                  <Button\n                    onClick={handleCameraCapture}\n                    variant=\"outline\"\n                    className=\"w-full\"\n                    data-testid=\"button-camera-capture\"\n                  >\n                    <Camera size={16} className=\"mr-2\" />\n                    Take Photo\n                  </Button>\n                </div>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                <div className=\"relative\">\n                  <img\n                    src={userPhoto}\n                    alt=\"Your photo\"\n                    className=\"w-full aspect-[3/4] object-cover rounded-lg\"\n                  />\n                  <button\n                    onClick={resetTryOn}\n                    className=\"absolute top-2 right-2 w-8 h-8 bg-black/70 text-white rounded-full flex items-center justify-center hover:bg-black transition-colors\"\n                    data-testid=\"button-remove-photo\"\n                  >\n                    <X size={16} />\n                  </button>\n                </div>\n\n                {!tryOnResult && (\n                  <Button\n                    onClick={processVirtualTryOn}\n                    disabled={isProcessing}\n                    className=\"w-full py-3 bg-black text-white font-light tracking-wide hover:bg-gray-800 transition-colors\"\n                    data-testid=\"button-process-tryon\"\n                  >\n                    {isProcessing ? (\n                      <>\n                        <div className=\"animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full mr-2\" />\n                        Processing...\n                      </>\n                    ) : (\n                      <>\n                        <Sparkles size={16} className=\"mr-2\" />\n                        Try On Outfit\n                      </>\n                    )}\n                  </Button>\n                )}\n              </div>\n            )}\n          </div>\n\n          {/* Right Side - Results */}\n          <div className=\"space-y-6\">\n            <div className=\"text-center\">\n              <h3 className=\"text-lg font-light mb-4\">Try-On Result</h3>\n              <p className=\"text-sm text-gray-600\">\n                See how the outfit looks on you\n              </p>\n            </div>\n\n            {tryOnResult ? (\n              <div className=\"space-y-4\">\n                <div className=\"relative\">\n                  <img\n                    src={tryOnResult}\n                    alt=\"Virtual try-on result\"\n                    className=\"w-full aspect-[3/4] object-cover rounded-lg border\"\n                    data-testid=\"img-tryon-result\"\n                  />\n                  {/* Overlay to show it's a demo */}\n                  <div className=\"absolute inset-0 bg-black/10 rounded-lg flex items-center justify-center\">\n                    <div className=\"bg-white/90 backdrop-blur-sm rounded-lg p-4 text-center\">\n                      <Sparkles size={24} className=\"mx-auto mb-2 text-gray-600\" />\n                      <p className=\"text-sm font-medium text-gray-800\">Demo Mode</p>\n                      <p className=\"text-xs text-gray-600\">Full try-on coming soon</p>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-3\">\n                  <Button\n                    onClick={resetTryOn}\n                    variant=\"outline\"\n                    className=\"font-light\"\n                    data-testid=\"button-try-again\"\n                  >\n                    Try Again\n                  </Button>\n                  <Button\n                    onClick={() => {\n                      toast({\n                        title: \"Saved!\",\n                        description: \"Try-on result saved to your gallery\",\n                      });\n                    }}\n                    className=\"bg-black text-white font-light hover:bg-gray-800\"\n                    data-testid=\"button-save-result\"\n                  >\n                    Save Result\n                  </Button>\n                </div>\n              </div>\n            ) : (\n              <div className=\"aspect-[3/4] bg-gray-100 rounded-lg flex items-center justify-center\">\n                <div className=\"text-center text-gray-500\">\n                  <Sparkles size={32} className=\"mx-auto mb-2\" />\n                  <p className=\"text-sm\">Upload your photo to see the try-on result</p>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Tips */}\n        <div className=\"mt-8 p-4 bg-gray-50 rounded-lg\">\n          <h4 className=\"text-sm font-medium mb-2\">Tips for best results:</h4>\n          <ul className=\"text-xs text-gray-600 space-y-1\">\n            <li>• Use a clear, well-lit photo</li>\n            <li>• Stand straight facing the camera</li>\n            <li>• Wear fitted clothing for accurate results</li>\n            <li>• Ensure your full body is visible</li>\n          </ul>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":10153},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/cart.ts":{"content":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport type { CartItemWithProduct } from '@shared/schema';\n\ninterface CartStore {\n  items: CartItemWithProduct[];\n  isOpen: boolean;\n  setItems: (items: CartItemWithProduct[]) => void;\n  addItem: (item: CartItemWithProduct) => void;\n  removeItem: (id: string) => void;\n  updateQuantity: (id: string, quantity: number) => void;\n  clearCart: () => void;\n  openCart: () => void;\n  closeCart: () => void;\n  getTotalPrice: () => number;\n  getTotalItems: () => number;\n}\n\nexport const useCartStore = create<CartStore>()(\n  persist(\n    (set, get) => ({\n      items: [],\n      isOpen: false,\n      setItems: (items) => set({ items }),\n      addItem: (item) =>\n        set((state) => {\n          const existingItem = state.items.find(\n            (i) => i.productId === item.productId && i.size === item.size && i.color === item.color\n          );\n          if (existingItem) {\n            return {\n              items: state.items.map((i) =>\n                i.id === existingItem.id\n                  ? { ...i, quantity: i.quantity + item.quantity }\n                  : i\n              ),\n            };\n          }\n          return { items: [...state.items, item] };\n        }),\n      removeItem: (id) =>\n        set((state) => ({\n          items: state.items.filter((item) => item.id !== id),\n        })),\n      updateQuantity: (id, quantity) =>\n        set((state) => ({\n          items: state.items.map((item) =>\n            item.id === id ? { ...item, quantity } : item\n          ),\n        })),\n      clearCart: () => set({ items: [] }),\n      openCart: () => set({ isOpen: true }),\n      closeCart: () => set({ isOpen: false }),\n      getTotalPrice: () => {\n        const { items } = get();\n        return items.reduce((total, item) => {\n          if (!item.product?.price) return total;\n          return total + parseFloat(item.product.price) * item.quantity;\n        }, 0);\n      },\n      getTotalItems: () => {\n        const { items } = get();\n        return items.reduce((total, item) => total + item.quantity, 0);\n      },\n    }),\n    {\n      name: 'cart-storage',\n      partialize: (state) => ({ items: state.items }),\n    }\n  )\n);\n","size_bytes":2218},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const [url, params] = queryKey as [string, Record<string, any>?];\n    \n    // Build query string if params exist\n    let finalUrl = url;\n    if (params) {\n      const searchParams = new URLSearchParams();\n      Object.entries(params).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          searchParams.append(key, String(value));\n        }\n      });\n      const queryString = searchParams.toString();\n      if (queryString) {\n        finalUrl += `?${queryString}`;\n      }\n    }\n    \n    const res = await fetch(finalUrl, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1887},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/category.tsx":{"content":"import { useParams } from 'wouter';\nimport { useQuery } from '@tanstack/react-query';\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport ProductGrid from '@/components/product-grid';\nimport { Filter, Grid, LayoutGrid } from 'lucide-react';\nimport type { ProductWithCategory, Category } from '@shared/schema';\n\nexport default function CategoryPage() {\n  const { slug } = useParams();\n  const [sortBy, setSortBy] = useState('newest');\n  const [showFilters, setShowFilters] = useState(false);\n\n  const { data: category, isLoading: categoryLoading } = useQuery({\n    queryKey: ['/api/categories', slug],\n  }) as { data: Category; isLoading: boolean };\n\n  const { data: products = [], isLoading: productsLoading } = useQuery({\n    queryKey: ['/api/products', { category: slug }],\n  }) as { data: ProductWithCategory[]; isLoading: boolean };\n\n  const sortedProducts = [...products].sort((a, b) => {\n    switch (sortBy) {\n      case 'price-low':\n        return parseFloat(a.price) - parseFloat(b.price);\n      case 'price-high':\n        return parseFloat(b.price) - parseFloat(a.price);\n      case 'name':\n        return a.name.localeCompare(b.name);\n      default:\n        return 0;\n    }\n  });\n\n  if (categoryLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-gray-200 rounded w-48 mb-4\"></div>\n          <div className=\"h-4 bg-gray-200 rounded w-32 mb-8\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      {/* Breadcrumb */}\n      <nav className=\"text-sm text-gray-500 mb-8\" data-testid=\"nav-breadcrumb\">\n        <span>Home</span>\n        <span className=\"mx-2\">/</span>\n        <span className=\"text-black font-medium\">{category?.name}</span>\n      </nav>\n\n      {/* Category Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-4xl font-light tracking-wide mb-4\" data-testid=\"text-category-title\">\n          {category?.name}\n        </h1>\n        {category?.description && (\n          <p className=\"text-gray-600 max-w-2xl\" data-testid=\"text-category-description\">\n            {category.description}\n          </p>\n        )}\n      </div>\n\n      {/* Filters and Sort */}\n      <div className=\"flex items-center justify-between mb-8 pb-4 border-b border-gray-100\">\n        <div className=\"flex items-center space-x-4\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setShowFilters(!showFilters)}\n            className=\"flex items-center space-x-2\"\n            data-testid=\"button-toggle-filters\"\n          >\n            <Filter size={16} />\n            <span>Filters</span>\n          </Button>\n          <div className=\"text-sm text-gray-500\" data-testid=\"text-product-count\">\n            {products.length} {products.length === 1 ? 'item' : 'items'}\n          </div>\n        </div>\n\n        <div className=\"flex items-center space-x-4\">\n          <Select value={sortBy} onValueChange={setSortBy}>\n            <SelectTrigger className=\"w-40\" data-testid=\"select-sort\">\n              <SelectValue placeholder=\"Sort by\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"newest\">Newest</SelectItem>\n              <SelectItem value=\"price-low\">Price: Low to High</SelectItem>\n              <SelectItem value=\"price-high\">Price: High to Low</SelectItem>\n              <SelectItem value=\"name\">Name</SelectItem>\n            </SelectContent>\n          </Select>\n\n          <div className=\"flex items-center space-x-1\">\n            <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-grid-view\">\n              <Grid size={16} />\n            </Button>\n            <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-list-view\">\n              <LayoutGrid size={16} />\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Filters Panel */}\n      {showFilters && (\n        <div className=\"bg-gray-50 p-6 rounded-lg mb-8\" data-testid=\"panel-filters\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div>\n              <h3 className=\"font-medium mb-4\">Size</h3>\n              <div className=\"flex flex-wrap gap-2\">\n                {['XS', 'S', 'M', 'L', 'XL', 'XXL'].map((size) => (\n                  <Button\n                    key={size}\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"text-xs\"\n                    data-testid={`filter-size-${size}`}\n                  >\n                    {size}\n                  </Button>\n                ))}\n              </div>\n            </div>\n            <div>\n              <h3 className=\"font-medium mb-4\">Color</h3>\n              <div className=\"flex flex-wrap gap-2\">\n                {['Black', 'White', 'Gray', 'Navy', 'Brown'].map((color) => (\n                  <Button\n                    key={color}\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"text-xs\"\n                    data-testid={`filter-color-${color.toLowerCase()}`}\n                  >\n                    {color}\n                  </Button>\n                ))}\n              </div>\n            </div>\n            <div>\n              <h3 className=\"font-medium mb-4\">Price Range</h3>\n              <div className=\"space-y-2\">\n                {[\n                  'Under ₹2,000',\n                  '₹2,000 - ₹5,000',\n                  '₹5,000 - ₹10,000',\n                  'Over ₹10,000'\n                ].map((range) => (\n                  <Button\n                    key={range}\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"text-xs w-full justify-start\"\n                    data-testid={`filter-price-${range.replace(/\\s+/g, '-').toLowerCase()}`}\n                  >\n                    {range}\n                  </Button>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Products Grid */}\n      {productsLoading ? (\n        <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6\">\n          {Array.from({ length: 12 }).map((_, i) => (\n            <div key={i} className=\"animate-pulse\">\n              <div className=\"bg-gray-200 h-80 mb-4\"></div>\n              <div className=\"space-y-2\">\n                <div className=\"h-4 bg-gray-200 rounded\"></div>\n                <div className=\"h-4 bg-gray-200 rounded w-2/3\"></div>\n              </div>\n            </div>\n          ))}\n        </div>\n      ) : (\n        <ProductGrid products={sortedProducts} />\n      )}\n    </div>\n  );\n}\n","size_bytes":6798},"client/src/pages/checkout.tsx":{"content":"import { useState } from 'react';\nimport { useStripe, Elements, PaymentElement, useElements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { useCartStore } from '@/lib/cart';\nimport { useToast } from '@/hooks/use-toast';\nimport { Link } from 'wouter';\nimport { ArrowLeft, CreditCard, Truck, Shield } from 'lucide-react';\n\n// Stripe setup\nconst stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY || 'pk_test_placeholder');\n\nconst CheckoutForm = () => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const { toast } = useToast();\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!stripe || !elements) return;\n\n    setIsProcessing(true);\n    \n    // Mock payment processing for demo\n    setTimeout(() => {\n      toast({\n        title: \"Payment Successful\",\n        description: \"Your order has been confirmed!\",\n      });\n      setIsProcessing(false);\n    }, 2000);\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      <div className=\"bg-gray-50 p-6 rounded-lg\">\n        <h3 className=\"text-lg font-light tracking-wide mb-4\">Payment Details</h3>\n        <div className=\"space-y-4\">\n          <PaymentElement />\n        </div>\n      </div>\n\n      <Button\n        type=\"submit\"\n        disabled={!stripe || isProcessing}\n        className=\"w-full py-4 bg-black text-white font-light tracking-wide hover:bg-gray-800 transition-colors\"\n        data-testid=\"button-complete-payment\"\n      >\n        {isProcessing ? 'Processing...' : 'Complete Payment'}\n      </Button>\n    </form>\n  );\n};\n\nexport default function Checkout() {\n  const { items, getTotalPrice, clearCart } = useCartStore();\n  const [shippingInfo, setShippingInfo] = useState({\n    name: '',\n    email: '',\n    address: '',\n    city: '',\n    postalCode: '',\n    phone: ''\n  });\n\n  const total = getTotalPrice();\n  const shipping = 200;\n  const tax = total * 0.18; // 18% GST\n  const finalTotal = total + shipping + tax;\n\n  if (items.length === 0) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 py-20\">\n        <div className=\"container mx-auto px-6 text-center\">\n          <h1 className=\"text-4xl font-extralight tracking-[0.2em] mb-8\">Your cart is empty</h1>\n          <Link href=\"/\">\n            <Button className=\"bg-black text-white px-8 py-3 font-light tracking-wide\">\n              Continue Shopping\n            </Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b\">\n        <div className=\"container mx-auto px-6 py-6\">\n          <div className=\"flex items-center space-x-4\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"p-2\">\n                <ArrowLeft size={20} />\n              </Button>\n            </Link>\n            <h1 className=\"text-2xl font-extralight tracking-[0.2em]\">CHECKOUT</h1>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-6 py-12\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n          {/* Left Column - Forms */}\n          <div className=\"space-y-8\">\n            {/* Shipping Information */}\n            <div className=\"bg-white p-8 rounded-lg shadow-sm\">\n              <h2 className=\"text-xl font-light tracking-wide mb-6 flex items-center\">\n                <Truck size={20} className=\"mr-3\" />\n                Shipping Information\n              </h2>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"name\" className=\"text-sm font-light\">Full Name</Label>\n                  <Input\n                    id=\"name\"\n                    value={shippingInfo.name}\n                    onChange={(e) => setShippingInfo({...shippingInfo, name: e.target.value})}\n                    className=\"mt-1\"\n                    data-testid=\"input-name\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"email\" className=\"text-sm font-light\">Email</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={shippingInfo.email}\n                    onChange={(e) => setShippingInfo({...shippingInfo, email: e.target.value})}\n                    className=\"mt-1\"\n                    data-testid=\"input-email\"\n                  />\n                </div>\n                <div className=\"md:col-span-2\">\n                  <Label htmlFor=\"address\" className=\"text-sm font-light\">Address</Label>\n                  <Input\n                    id=\"address\"\n                    value={shippingInfo.address}\n                    onChange={(e) => setShippingInfo({...shippingInfo, address: e.target.value})}\n                    className=\"mt-1\"\n                    data-testid=\"input-address\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"city\" className=\"text-sm font-light\">City</Label>\n                  <Input\n                    id=\"city\"\n                    value={shippingInfo.city}\n                    onChange={(e) => setShippingInfo({...shippingInfo, city: e.target.value})}\n                    className=\"mt-1\"\n                    data-testid=\"input-city\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"postal\" className=\"text-sm font-light\">Postal Code</Label>\n                  <Input\n                    id=\"postal\"\n                    value={shippingInfo.postalCode}\n                    onChange={(e) => setShippingInfo({...shippingInfo, postalCode: e.target.value})}\n                    className=\"mt-1\"\n                    data-testid=\"input-postal\"\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* Payment Section */}\n            <div className=\"bg-white p-8 rounded-lg shadow-sm\">\n              <h2 className=\"text-xl font-light tracking-wide mb-6 flex items-center\">\n                <CreditCard size={20} className=\"mr-3\" />\n                Payment Method\n              </h2>\n              <Elements stripe={stripePromise}>\n                <CheckoutForm />\n              </Elements>\n            </div>\n\n            {/* Security Notice */}\n            <div className=\"bg-green-50 p-6 rounded-lg flex items-start space-x-3\">\n              <Shield size={20} className=\"text-green-600 mt-1\" />\n              <div>\n                <h3 className=\"font-medium text-green-800\">Secure Payment</h3>\n                <p className=\"text-sm text-green-700 mt-1\">\n                  Your payment information is encrypted and secure. We never store your card details.\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* Right Column - Order Summary */}\n          <div className=\"bg-white p-8 rounded-lg shadow-sm h-fit\">\n            <h2 className=\"text-xl font-light tracking-wide mb-6\">Order Summary</h2>\n            \n            {/* Cart Items */}\n            <div className=\"space-y-4 mb-6\">\n              {items.map((item) => (\n                <div key={`${item.productId}-${item.size}-${item.color}`} className=\"flex items-center space-x-4\">\n                  <img\n                    src={item.product.images?.[0] || 'https://images.unsplash.com/photo-1441986300917-64674bd600d8?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&h=100'}\n                    alt={item.product.name}\n                    className=\"w-16 h-16 object-cover rounded\"\n                  />\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-light\">{item.product.name}</h3>\n                    <p className=\"text-sm text-gray-600\">\n                      {item.size && `Size: ${item.size}`} {item.color && `Color: ${item.color}`}\n                    </p>\n                    <p className=\"text-sm\">Qty: {item.quantity}</p>\n                  </div>\n                  <p className=\"font-medium\">₹{(parseFloat(item.product.price) * item.quantity).toLocaleString('en-IN')}</p>\n                </div>\n              ))}\n            </div>\n\n            <div className=\"border-t pt-4 space-y-2\">\n              <div className=\"flex justify-between\">\n                <span>Subtotal</span>\n                <span>₹{total.toLocaleString('en-IN')}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Shipping</span>\n                <span>₹{shipping.toLocaleString('en-IN')}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Tax (GST 18%)</span>\n                <span>₹{tax.toLocaleString('en-IN')}</span>\n              </div>\n              <div className=\"border-t pt-2 flex justify-between text-lg font-medium\">\n                <span>Total</span>\n                <span>₹{finalTotal.toLocaleString('en-IN')}</span>\n              </div>\n            </div>\n\n            <div className=\"mt-6 text-sm text-gray-600\">\n              <p>• Free returns within 30 days</p>\n              <p>• 2-year warranty included</p>\n              <p>• Delivery in 3-5 business days</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":9497},"client/src/pages/home.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport HeroSection from '@/components/hero-section';\nimport AestheticGallery from '@/components/aesthetic-gallery';\nimport ModelGrid from '@/components/model-grid';\nimport CategoryGrid from '@/components/category-grid';\nimport ProductGrid from '@/components/product-grid';\nimport Newsletter from '@/components/newsletter';\nimport { Link } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport type { ProductWithCategory } from '@shared/schema';\n\nexport default function Home() {\n  const { data: featuredProducts = [], isLoading } = useQuery({\n    queryKey: ['/api/products', { featured: 'true' }],\n  }) as { data: ProductWithCategory[]; isLoading: boolean };\n\n  return (\n    <>\n      {/* Main Hero Section */}\n      <HeroSection />\n      \n      {/* Aesthetic Full-Size Gallery */}\n      <AestheticGallery />\n      \n      {/* Full-Size Model Grid with Random Layout */}\n      <ModelGrid />\n      \n      {/* Category Grid */}\n      <CategoryGrid />\n      \n      {/* Featured Products */}\n      {isLoading ? (\n        <section className=\"py-20 bg-white\">\n          <div className=\"container mx-auto px-6\">\n            <h2 className=\"text-4xl md:text-6xl font-extralight text-center mb-16 tracking-[0.2em]\">\n              FEATURED\n            </h2>\n            <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-8\">\n              {Array.from({ length: 8 }).map((_, i) => (\n                <div key={i} className=\"animate-pulse\">\n                  <div className=\"bg-gray-200 h-96 mb-4\"></div>\n                  <div className=\"space-y-2\">\n                    <div className=\"h-4 bg-gray-200 rounded\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded w-2/3\"></div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </section>\n      ) : (\n        <ProductGrid\n          products={featuredProducts}\n          title=\"FEATURED\"\n          className=\"bg-white py-20\"\n        />\n      )}\n\n      {/* Parallax Editorial Section */}\n      <section className=\"relative py-32 parallax-bg\" style={{\n        backgroundImage: \"url('https://images.unsplash.com/photo-1529139574466-a303027c1d8b?ixlib=rb-4.0.3&auto=format&fit=crop&w=2000&h=1200')\"\n      }}>\n        <div className=\"absolute inset-0 bg-black/40\"></div>\n        <div className=\"relative z-10 container mx-auto px-6\">\n          <div className=\"max-w-2xl mx-auto text-center text-white\">\n            <h2 className=\"text-5xl md:text-7xl font-extralight mb-8 tracking-[0.2em] text-shadow\" data-testid=\"text-edit-title\">\n              THE EDIT\n            </h2>\n            <p className=\"text-lg font-light leading-relaxed mb-12 opacity-90\" data-testid=\"text-edit-description\">\n              Discover our curated selection of timeless pieces that define contemporary elegance.\n              From statement coats to refined accessories, each item is carefully chosen to elevate\n              your wardrobe with sophisticated style.\n            </p>\n            <Button\n              asChild\n              className=\"bg-transparent border border-white text-white px-12 py-4 text-sm font-light tracking-[0.2em] hover:bg-white hover:text-black transition-all duration-300\"\n              data-testid=\"button-shop-edit\"\n            >\n              <Link href=\"/category/woman\">EXPLORE COLLECTION</Link>\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      <Newsletter />\n    </>\n  );\n}\n","size_bytes":3503},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/product-new.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useParams, useLocation } from 'wouter';\nimport { useQuery } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { useCartStore } from '@/lib/cart';\nimport { useToast } from '@/hooks/use-toast';\nimport { Minus, Plus, Heart, Share, ArrowLeft, Truck, Shield, RotateCcw, Star, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { Link } from 'wouter';\nimport type { ProductWithCategory } from '@shared/schema';\nimport VirtualTryOn from '@/components/virtual-tryon';\n\nexport default function ProductPage() {\n  const { slug } = useParams<{ slug: string }>();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const { addItem } = useCartStore();\n\n  const [selectedImage, setSelectedImage] = useState(0);\n  const [selectedSize, setSelectedSize] = useState('');\n  const [selectedColor, setSelectedColor] = useState('');\n  const [quantity, setQuantity] = useState(1);\n  const [isWishlisted, setIsWishlisted] = useState(false);\n\n  const { data: product, isLoading, error } = useQuery({\n    queryKey: ['/api/products', slug],\n    enabled: !!slug,\n  }) as { data: ProductWithCategory | undefined; isLoading: boolean; error: any };\n\n  // Auto-select first available options\n  useEffect(() => {\n    if (product && !selectedSize && product.sizes && product.sizes.length > 0) {\n      setSelectedSize(product.sizes[0]);\n    }\n    if (product && !selectedColor && product.colors && product.colors.length > 0) {\n      setSelectedColor(product.colors[0]);\n    }\n  }, [product, selectedSize, selectedColor]);\n\n  const handleAddToCart = () => {\n    if (!product) return;\n\n    const cartItem = {\n      id: `${product.id}-${selectedSize}-${selectedColor}-${Date.now()}`,\n      productId: product.id,\n      quantity,\n      size: selectedSize || null,\n      color: selectedColor || null,\n      product: product,\n      sessionId: 'session'\n    };\n\n    addItem(cartItem);\n\n    toast({\n      title: \"Added to cart\",\n      description: `${product.name} has been added to your cart.`,\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-white\">\n        <div className=\"container mx-auto px-6 py-20\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n            {/* Image Skeleton */}\n            <div className=\"space-y-4\">\n              <div className=\"aspect-square bg-gray-200 animate-pulse rounded-lg\" />\n              <div className=\"grid grid-cols-4 gap-2\">\n                {Array.from({ length: 4 }).map((_, i) => (\n                  <div key={i} className=\"aspect-square bg-gray-200 animate-pulse rounded\" />\n                ))}\n              </div>\n            </div>\n            {/* Content Skeleton */}\n            <div className=\"space-y-6\">\n              <div className=\"h-8 bg-gray-200 animate-pulse rounded\" />\n              <div className=\"h-6 bg-gray-200 animate-pulse rounded w-1/3\" />\n              <div className=\"space-y-2\">\n                <div className=\"h-4 bg-gray-200 animate-pulse rounded\" />\n                <div className=\"h-4 bg-gray-200 animate-pulse rounded w-3/4\" />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !product) {\n    return (\n      <div className=\"min-h-screen bg-white flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-light tracking-wide mb-4\">Product not found</h1>\n          <Link href=\"/\">\n            <Button className=\"bg-black text-white px-8 py-3 font-light tracking-wide\">\n              Return Home\n            </Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  const productImages = product.images && product.images.length > 0 \n    ? product.images \n    : ['https://images.unsplash.com/photo-1441986300917-64674bd600d8?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=800'];\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 min-h-screen\">\n        {/* Left Side - Product Images */}\n        <div className=\"relative bg-gray-50\">\n          {/* Main Image */}\n          <div className=\"h-screen sticky top-0 overflow-hidden\">\n            <img\n              src={productImages[selectedImage]}\n              alt={product.name}\n              className=\"w-full h-full object-cover\"\n              data-testid=\"img-product-main\"\n            />\n            \n            {/* Image Navigation */}\n            {productImages.length > 1 && (\n              <>\n                <button\n                  onClick={() => setSelectedImage(selectedImage > 0 ? selectedImage - 1 : productImages.length - 1)}\n                  className=\"absolute left-4 top-1/2 -translate-y-1/2 w-10 h-10 bg-white/80 backdrop-blur-sm rounded-full flex items-center justify-center hover:bg-white transition-colors\"\n                >\n                  <ChevronLeft size={20} />\n                </button>\n                <button\n                  onClick={() => setSelectedImage(selectedImage < productImages.length - 1 ? selectedImage + 1 : 0)}\n                  className=\"absolute right-4 top-1/2 -translate-y-1/2 w-10 h-10 bg-white/80 backdrop-blur-sm rounded-full flex items-center justify-center hover:bg-white transition-colors\"\n                >\n                  <ChevronRight size={20} />\n                </button>\n              </>\n            )}\n\n            {/* Image Dots Indicator */}\n            {productImages.length > 1 && (\n              <div className=\"absolute bottom-6 left-1/2 -translate-x-1/2 flex space-x-2\">\n                {productImages.map((_: string, index: number) => (\n                  <button\n                    key={index}\n                    onClick={() => setSelectedImage(index)}\n                    className={`w-2 h-2 rounded-full transition-colors ${\n                      selectedImage === index ? 'bg-black' : 'bg-white/60'\n                    }`}\n                  />\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Right Side - Product Details */}\n        <div className=\"px-8 lg:px-12 py-12 flex flex-col justify-between min-h-screen\">\n          {/* Back Button */}\n          <div className=\"mb-8\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"p-0 h-auto font-light text-sm tracking-wide hover:bg-transparent\">\n                ← BACK\n              </Button>\n            </Link>\n          </div>\n\n          {/* Product Details */}\n          <div className=\"flex-1 space-y-8\">\n            {/* Product Header */}\n            <div className=\"space-y-6\">\n              <h1 className=\"text-2xl md:text-3xl font-light tracking-[0.05em] leading-tight\" data-testid=\"text-product-name\">\n                {product.name}\n              </h1>\n              <p className=\"text-xl font-light text-gray-900\" data-testid=\"text-product-price\">\n                ₹{parseFloat(product.price).toLocaleString('en-IN')}\n              </p>\n            </div>\n\n            {/* Product Description */}\n            {product.description && (\n              <div className=\"border-t border-gray-200 pt-6\">\n                <p className=\"text-sm text-gray-600 leading-relaxed font-light\" data-testid=\"text-product-description\">\n                  {product.description}\n                </p>\n              </div>\n            )}\n\n            {/* Product Options */}\n            <div className=\"space-y-8\">\n              {/* Size Selection */}\n              {product.sizes && product.sizes.length > 0 && (\n                <div>\n                  <h3 className=\"text-xs font-light tracking-[0.2em] uppercase mb-4 text-gray-700\">\n                    Size\n                  </h3>\n                  <div className=\"grid grid-cols-4 gap-2\">\n                    {product.sizes.map((size) => (\n                      <button\n                        key={size}\n                        onClick={() => setSelectedSize(size)}\n                        className={`py-3 text-xs font-light tracking-wide transition-all duration-200 border ${\n                          selectedSize === size\n                            ? 'border-black bg-black text-white'\n                            : 'border-gray-300 hover:border-black'\n                        }`}\n                        data-testid={`button-size-${size.toLowerCase()}`}\n                      >\n                        {size}\n                      </button>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {/* Color Selection */}\n              {product.colors && product.colors.length > 0 && (\n                <div>\n                  <h3 className=\"text-xs font-light tracking-[0.2em] uppercase mb-4 text-gray-700\">\n                    Color\n                  </h3>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {product.colors.map((color) => (\n                      <button\n                        key={color}\n                        onClick={() => setSelectedColor(color)}\n                        className={`px-4 py-2 text-xs font-light tracking-wide transition-all duration-200 border ${\n                          selectedColor === color\n                            ? 'border-black bg-black text-white'\n                            : 'border-gray-300 hover:border-black'\n                        }`}\n                        data-testid={`button-color-${color.toLowerCase()}`}\n                      >\n                        {color}\n                      </button>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n\n          </div>\n\n          {/* Bottom Section - Actions */}\n          <div className=\"space-y-6 border-t border-gray-200 pt-8\">\n            {/* Quantity Selector */}\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-xs font-light tracking-[0.2em] uppercase text-gray-700\">Quantity</span>\n              <div className=\"flex items-center border border-gray-300\">\n                <button\n                  onClick={() => setQuantity(Math.max(1, quantity - 1))}\n                  disabled={quantity <= 1}\n                  className=\"p-2 hover:bg-gray-50 disabled:opacity-50\"\n                  data-testid=\"button-decrease-quantity\"\n                >\n                  <Minus size={14} />\n                </button>\n                <span className=\"px-4 py-2 border-x border-gray-300 min-w-[50px] text-center text-sm\" data-testid=\"text-quantity\">\n                  {quantity}\n                </span>\n                <button\n                  onClick={() => setQuantity(quantity + 1)}\n                  className=\"p-2 hover:bg-gray-50\"\n                  data-testid=\"button-increase-quantity\"\n                >\n                  <Plus size={14} />\n                </button>\n              </div>\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"space-y-3\">\n              <Button\n                onClick={handleAddToCart}\n                className=\"w-full py-4 bg-black text-white font-light tracking-[0.1em] text-xs uppercase hover:bg-gray-800 transition-colors\"\n                data-testid=\"button-add-to-cart\"\n              >\n                Add to Bag\n              </Button>\n              \n              <div className=\"space-y-3\">\n                {/* Virtual Try-On */}\n                <VirtualTryOn \n                  productImage={productImages[0]}\n                  productName={product.name}\n                />\n                \n                <div className=\"flex space-x-3\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => setIsWishlisted(!isWishlisted)}\n                    className=\"flex-1 py-3 font-light tracking-wide text-xs uppercase border-gray-300\"\n                    data-testid=\"button-wishlist\"\n                  >\n                    <Heart size={14} className={`mr-2 ${isWishlisted ? 'fill-current' : ''}`} />\n                    Wishlist\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    className=\"flex-1 py-3 font-light tracking-wide text-xs uppercase border-gray-300\"\n                    data-testid=\"button-share\"\n                  >\n                    <Share size={14} className=\"mr-2\" />\n                    Share\n                  </Button>\n                </div>\n              </div>\n            </div>\n\n            {/* Product Features */}\n            <div className=\"text-xs text-gray-600 space-y-2 pt-4 border-t border-gray-100\">\n              <div className=\"flex items-center space-x-2\">\n                <Truck size={14} />\n                <span>Free delivery</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <RotateCcw size={14} />\n                <span>Free returns</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Shield size={14} />\n                <span>2-year warranty</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* You May Be Interested In Section */}\n      <RecommendedProducts currentProductId={product.id} />\n    </div>\n  );\n}\n\n// Recommended Products Component\nfunction RecommendedProducts({ currentProductId }: { currentProductId: string }) {\n  const { data: products } = useQuery({\n    queryKey: ['/api/products'],\n  }) as { data: ProductWithCategory[] | undefined };\n\n  if (!products || products.length <= 1) return null;\n\n  // Filter out current product and take first 4\n  const recommendedProducts = products\n    .filter((p) => p.id !== currentProductId)\n    .slice(0, 4);\n\n  return (\n    <div className=\"bg-gray-50 py-20\">\n      <div className=\"container mx-auto px-6\">\n        <h2 className=\"text-2xl md:text-3xl font-extralight tracking-[0.1em] text-center mb-16\">\n          YOU MAY BE INTERESTED IN\n        </h2>\n        \n        <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-8\">\n          {recommendedProducts.map((recProduct) => (\n            <Link \n              key={recProduct.id} \n              href={`/product/${recProduct.slug}`}\n              className=\"group\"\n              data-testid={`link-recommended-${recProduct.slug}`}\n            >\n              <div className=\"space-y-4\">\n                {/* Product Image */}\n                <div className=\"aspect-[2/3] bg-white overflow-hidden\">\n                  <img\n                    src={recProduct.images?.[0] || 'https://images.unsplash.com/photo-1441986300917-64674bd600d8?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=800'}\n                    alt={recProduct.name}\n                    className=\"w-full h-full object-cover transition-transform duration-500 group-hover:scale-105\"\n                  />\n                </div>\n                \n                {/* Product Info */}\n                <div className=\"space-y-2\">\n                  <h3 className=\"text-sm font-light tracking-wide text-gray-900 group-hover:text-black transition-colors\">\n                    {recProduct.name}\n                  </h3>\n                  <p className=\"text-sm font-light text-gray-700\">\n                    ₹{parseFloat(recProduct.price).toLocaleString('en-IN')}\n                  </p>\n                </div>\n              </div>\n            </Link>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":15445},"client/src/pages/product.tsx":{"content":"import { useParams } from 'wouter';\nimport { useQuery } from '@tanstack/react-query';\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Heart, Minus, Plus, ShoppingBag, Truck, RotateCcw } from 'lucide-react';\nimport { useCartStore } from '@/lib/cart';\nimport { useToast } from '@/hooks/use-toast';\nimport type { ProductWithCategory } from '@shared/schema';\n\nexport default function ProductPage() {\n  const { slug } = useParams();\n  const [selectedSize, setSelectedSize] = useState('');\n  const [selectedColor, setSelectedColor] = useState('');\n  const [quantity, setQuantity] = useState(1);\n  const [liked, setLiked] = useState(false);\n  const [selectedImage, setSelectedImage] = useState(0);\n  \n  const { addItem } = useCartStore();\n  const { toast } = useToast();\n\n  const { data: product, isLoading } = useQuery({\n    queryKey: ['/api/products', slug],\n  }) as { data: ProductWithCategory; isLoading: boolean };\n\n  const handleAddToCart = () => {\n    if (!product) return;\n    \n    if (product.sizes.length > 1 && !selectedSize) {\n      toast({\n        title: 'Please select a size',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    if (product.colors.length > 1 && !selectedColor) {\n      toast({\n        title: 'Please select a color',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    const cartItem = {\n      id: `${product.id}-${selectedSize}-${selectedColor}`,\n      sessionId: 'anonymous',\n      productId: product.id,\n      quantity,\n      size: selectedSize || null,\n      color: selectedColor || null,\n      product,\n    };\n\n    addItem(cartItem);\n    \n    toast({\n      title: 'Added to cart',\n      description: `${product.name} has been added to your cart.`,\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n          <div className=\"animate-pulse\">\n            <div className=\"bg-gray-200 aspect-square rounded-lg mb-4\"></div>\n            <div className=\"grid grid-cols-4 gap-2\">\n              {Array.from({ length: 4 }).map((_, i) => (\n                <div key={i} className=\"bg-gray-200 aspect-square rounded\"></div>\n              ))}\n            </div>\n          </div>\n          <div className=\"space-y-6 animate-pulse\">\n            <div className=\"h-8 bg-gray-200 rounded w-3/4\"></div>\n            <div className=\"h-6 bg-gray-200 rounded w-1/4\"></div>\n            <div className=\"space-y-2\">\n              <div className=\"h-4 bg-gray-200 rounded\"></div>\n              <div className=\"h-4 bg-gray-200 rounded w-5/6\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!product) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <p className=\"text-center text-gray-500\">Product not found.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      {/* Breadcrumb */}\n      <nav className=\"text-sm text-gray-500 mb-8\" data-testid=\"nav-breadcrumb\">\n        <span>Home</span>\n        <span className=\"mx-2\">/</span>\n        {product.category && (\n          <>\n            <span>{product.category.name}</span>\n            <span className=\"mx-2\">/</span>\n          </>\n        )}\n        <span className=\"text-black font-medium\">{product.name}</span>\n      </nav>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n        {/* Product Images */}\n        <div className=\"space-y-4\">\n          <div className=\"aspect-square bg-gray-50 overflow-hidden rounded-lg\">\n            <img\n              src={product.images?.[selectedImage] || product.images?.[0] || 'https://images.unsplash.com/photo-1441986300917-64674bd600d8?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=800'}\n              alt={product.name}\n              className=\"w-full h-full object-cover cursor-zoom-in\"\n              data-testid=\"img-product-main\"\n            />\n          </div>\n          \n          {product.images && product.images.length > 1 && (\n            <div className=\"grid grid-cols-4 gap-2\" data-testid=\"grid-product-thumbnails\">\n              {product.images.map((image, index) => (\n                <button\n                  key={index}\n                  onClick={() => setSelectedImage(index)}\n                  className={`aspect-square bg-gray-50 overflow-hidden rounded border-2 ${\n                    selectedImage === index ? 'border-black' : 'border-transparent'\n                  }`}\n                  data-testid={`button-thumbnail-${index}`}\n                >\n                  <img\n                    src={image}\n                    alt={`${product.name} ${index + 1}`}\n                    className=\"w-full h-full object-cover\"\n                  />\n                </button>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Product Details */}\n        <div className=\"space-y-6\">\n          <div>\n            <h1 className=\"text-3xl font-light mb-4 tracking-wide\" data-testid=\"text-product-name\">\n              {product.name}\n            </h1>\n            <p className=\"text-2xl font-medium\" data-testid=\"text-product-price\">\n              ₹{parseFloat(product.price).toLocaleString('en-IN', {\n                minimumFractionDigits: 2,\n              })}\n            </p>\n          </div>\n\n          {product.description && (\n            <p className=\"text-gray-600 leading-relaxed\" data-testid=\"text-product-description\">\n              {product.description}\n            </p>\n          )}\n\n          {/* Size Selection */}\n          {product.sizes && product.sizes.length > 1 && (\n            <div>\n              <h3 className=\"text-sm font-medium mb-3\" data-testid=\"text-size-label\">Size</h3>\n              <Select value={selectedSize} onValueChange={setSelectedSize}>\n                <SelectTrigger className=\"w-full\" data-testid=\"select-size\">\n                  <SelectValue placeholder=\"Select size\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {product.sizes.map((size) => (\n                    <SelectItem key={size} value={size}>\n                      {size}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          )}\n\n          {/* Color Selection */}\n          {product.colors && product.colors.length > 1 && (\n            <div>\n              <h3 className=\"text-sm font-medium mb-3\" data-testid=\"text-color-label\">Color</h3>\n              <div className=\"flex flex-wrap gap-2\">\n                {product.colors.map((color) => (\n                  <Button\n                    key={color}\n                    variant={selectedColor === color ? 'default' : 'outline'}\n                    size=\"sm\"\n                    onClick={() => setSelectedColor(color)}\n                    data-testid={`button-color-${color.toLowerCase()}`}\n                  >\n                    {color}\n                  </Button>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Quantity */}\n          <div>\n            <h3 className=\"text-sm font-medium mb-3\" data-testid=\"text-quantity-label\">Quantity</h3>\n            <div className=\"flex items-center space-x-3\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setQuantity(Math.max(1, quantity - 1))}\n                disabled={quantity <= 1}\n                data-testid=\"button-decrease-quantity\"\n              >\n                <Minus size={16} />\n              </Button>\n              <span className=\"w-12 text-center\" data-testid=\"text-quantity\">\n                {quantity}\n              </span>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setQuantity(quantity + 1)}\n                data-testid=\"button-increase-quantity\"\n              >\n                <Plus size={16} />\n              </Button>\n            </div>\n          </div>\n\n          {/* Add to Cart */}\n          <div className=\"space-y-3\">\n            <Button\n              className=\"w-full bg-black text-white hover:bg-gray-800 py-3\"\n              onClick={handleAddToCart}\n              disabled={!product.inStock}\n              data-testid=\"button-add-to-cart\"\n            >\n              <ShoppingBag size={16} className=\"mr-2\" />\n              {product.inStock ? 'ADD TO CART' : 'OUT OF STOCK'}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              className=\"w-full\"\n              onClick={() => setLiked(!liked)}\n              data-testid=\"button-add-to-wishlist\"\n            >\n              <Heart\n                size={16}\n                className={`mr-2 ${liked ? 'fill-red-500 text-red-500' : ''}`}\n              />\n              {liked ? 'ADDED TO WISHLIST' : 'ADD TO WISHLIST'}\n            </Button>\n          </div>\n\n          {/* Stock Status */}\n          {product.inStock && (\n            <Badge variant=\"outline\" className=\"text-green-600 border-green-200\" data-testid=\"badge-in-stock\">\n              In Stock\n            </Badge>\n          )}\n\n          {/* Additional Info */}\n          <div className=\"space-y-4 pt-6 border-t border-gray-100\">\n            <div className=\"flex items-center space-x-3 text-sm text-gray-600\">\n              <Truck size={16} />\n              <span>Free delivery on orders over ₹2,990</span>\n            </div>\n            <div className=\"flex items-center space-x-3 text-sm text-gray-600\">\n              <RotateCcw size={16} />\n              <span>30-day return policy</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9851},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}","size_bytes":3834},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}